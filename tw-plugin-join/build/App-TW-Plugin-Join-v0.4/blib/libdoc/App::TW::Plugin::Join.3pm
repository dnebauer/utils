.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::TW::Plugin::Join 3pm"
.TH App::TW::Plugin::Join 3pm 2024-07-05 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
App::TW::Plugin::Join \- compact server\-type TiddlyWiki plugin to a single file
.SS VERSION
.IX Subsection "VERSION"
This documentation is for \f(CW\*(C`App::TW::Plugin::Join\*(C'\fR version 0.4.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use App::TW::Plugin::Join;
\&
\&    App::TW::Plugin::Join\->new_with_options\->run;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
There are, broadly speaking, two type of TiddlyWiki5 <https://tiddlywiki.com/>
wikis:
.IP \(bu 4
Single-file html wikis which are directly opened in web browsers. This was the
first type of wiki developed and is still the most used type.
.IP \(bu 4
Client-server wikis in which wiki content is served from a node.js server while
the client uses a web-browser interface.
.PP
There are also two types of tiddlywiki plugins:
.IP \(bu 4
Single-file plugins in which a single file contains all tiddler for a plugin.
This file can either be in \f(CW\*(C`tid\*(C'\fR or \f(CW\*(C`json\*(C'\fR format.
.Sp
This is the only plugin format compatible with single-file wikis, but they can
also be used in client wikis in a client-server installation.
.IP \(bu 4
Multiple-file wikis in which each tiddler in a plugin has its own file. Each
plugin has a dedicated directory, and may contain multiple levels of
subdirectories. In a client-server configuration this style of plugin can be
installed in a client wiki or in the server installation; in the latter case it
is available to all client wikis served by the server. There is a nominated
\&\fIplugins\fR directory in each client wiki, and in the server installation, under
which these plugins are installed.
.Sp
This plugin format is not compatible with single-file wikis.
.PP
This script accepts a base directory for a multiple-file plugin. It joins these
files (and their contained tiddlers) into a single plugin tiddler which is
output as a single file.
.PP
The format of the outputted file can be \f(CW\*(C`tid\*(C'\fR (default) or \f(CW\*(C`json\*(C'\fR, and is
specified with the \f(CW\*(C`\-f\*(C'\fR (\f(CW\*(C`\-\-format\*(C'\fR) option.
.PP
The output file is written to the current directory. The file name is the
plugin name converted according to tiddlywiki conventions, i.e., slashes and
colons converted to underscores. For example, the \fR\f(CI$:\fR\fI/plugins/kookma/shiraz\fR
plugin would be output to the \fI\fR\f(CI$_\fR\fI\|_plugins_kookma_shiraz\fR file. If the file
already exists in the current directory, the user is asked whether or not to
overwrite it. The script aborts if the user elects not to overwrite the
existing file.
.SS "Conversion details"
.IX Subsection "Conversion details"
This section provides details of the conversion process to assist in
troubleshooting.
.PP
\fIExtract tiddler titles from files\fR
.IX Subsection "Extract tiddler titles from files"
.PP
In addition to extracting tiddler titles from each file, an attempt is also
made to work out which deserializer is needed for each file. Unfortunately,
this was not entirely successful; for example, none of the available
deserializers work with \fIcss\fR files. So, instead of using the \f(CW\*(C`\-\-import\*(C'\fR
command, which requires a deserializer to be specified for each file, the
\&\f(CW\*(C`\-\-load\*(C'\fR command is used. The \f(CW\*(C`\-\-load\*(C'\fR command infers from a file's extension
which deserializer to use for it. (Presumably it has access to more
deserializers than \f(CW\*(C`\-\-import\*(C'\fR, since it is able to handle \fIcss\fR files.)
.PP
\fICreate custom macro\fR
.IX Subsection "Create custom macro"
.PP
The custom macro \f(CW\*(C`plugintiddlerstext\*(C'\fR outputs a set of tiddlers in a format
suitable for use in a parent plugin file's text field. The macro is provided by
the file \fIplugintiddlerstext.js\fR, which is created in a temporary directory.
Here is the content of the file which defines tiddler
\&\fR\f(CI$:\fR\fI/.dtn/modules/macros/plugintiddlerstext.js\fR:
.PP
.Vb 4
\&    /*\e
\&    title: $:/.dtn/modules/macros/plugintiddlerstext.js
\&    type: application/javascript
\&    module\-type: macro
\&
\&    Macro to output tiddlers matching a filter to JSON in a format
\&    usable for plugin tiddler \*(Aqtext\*(Aq fields
\&
\&    \e*/
\&    (function(){
\&
\&    /*jslint node: true, browser: true */
\&    /*global $tw: false */
\&    "use strict";
\&
\&    /*
\&    Information about this macro
\&    */
\&
\&    exports.name = "plugintiddlerstext";
\&
\&    exports.params = [
\&        {name: "filter"}
\&    ];
\&
\&    /*
\&    Run the macro
\&    */
\&    exports.run = function(filter) {
\&        var tiddlers = this.wiki.filterTiddlers(filter),
\&            tiddlers_data = new Object(),
\&            data = new Object();
\&        for(var t=0;t<tiddlers.length; t++) {
\&            var tiddler = this.wiki.getTiddler(tiddlers[t]);
\&            if(tiddler) {
\&                var fields = new Object();
\&                for(var field in tiddler.fields) {
\&                    fields[field] = tiddler.getFieldString(field);
\&                }
\&                var title = tiddler.getFieldString(\*(Aqtitle\*(Aq);
\&                tiddlers_data[title] = fields;
\&            }
\&        }
\&        data[\*(Aqtiddlers\*(Aq] = tiddlers_data;
\&        return JSON.stringify(data,null,$tw.config.preferences.jsonSpaces);
\&    };
\&
\&    })();
.Ve
.PP
\fICustomised templates for setfield commands\fR
.IX Subsection "Customised templates for setfield commands"
.PP
These templates are used by the \f(CW\*(C`\-\-setfield\*(C'\fR command to create and populate
"type" and "text" fields in the plugin tiddler file.
.PP
One template is standard for all conversions: adding a "type" field set to
"application/json". This template is called
\&\fR\f(CI$:\fR\fI/.dtn/templates/plugin\-tiddlers\-type\fR. It is provided by the file
\&\fIplugintiddlerstext.tid\fR, which is written to a temporary directory and has
the content:
.PP
.Vb 1
\&    title: $:/core/templates/.dtn/plugin\-tiddlers\-type
\&
\&    <!\-\-
\&
\&    This template is for setting plugin field \*(Aqtype\*(Aq to \*(Aqapplication/json\*(Aq
\&
\&    \-\-><$text text=\*(Aqapplication/json\*(Aq/>
.Ve
.PP
Another template needs to be customised for each conversion project as it needs
to specify the tiddlers included in the plugin. It does this by calling the
macro \fR\f(CI$:\fR\fI/.dtn/modules/macros/plugintiddlerstext.js\fR discussed above. This
template is called \fI\fR\f(CI$:\fR\fI/.dtn/templates/plugin\-tiddlers\-text\fR. It is provided by
the file \fIplugintiddlerstext.tid\fR and has the content:
.PP
.Vb 1
\&    title: $:/core/templates/.dtn/plugin\-tiddlers\-text
\&
\&    <!\-\-
\&
\&    This template is for saving tiddlers for use in a plugin tiddler\*(Aqs text field
\&
\&    \-\-><$text text=<<plugintiddlerstext "[prefix[$:/plugins/.dtn/insert\-table/]] =[[$:/config/plugin/.dtn/insert\-table/style\-sets]]">>/>
.Ve
.PP
Plugin tiddlers are customarily prefixed with the plugin name. These plugin
tiddlers are specified using the \f(CW\*(C`prefix\*(C'\fR filter operator. Any plugin tiddlers
not prefixed with the plugin name are added to the filter individually using
the \f(CW\*(C`=\*(C'\fR filter prefix.
.PP
\fIImport server plugin files\fR
.IX Subsection "Import server plugin files"
.PP
All server plugin files and custom files are imported into a new wiki with a
single \f(CW\*(C`tiddlywiki\*(C'\fR command using multiple commands: the \f(CW\*(C`\-\-load\*(C'\fR command for
all import files except \fIplugin.info\fR, for which an \fI\-\-import\fR command is
used with the "application/json" deserializer. The files defining the custom
macro \fIplugintiddlerstext.js\fR, and custom templates \fIplugin-tiddlers-type\fR
and \fIplugin-tiddlers-text\fR, are also imported with \f(CW\*(C`\-\-load\*(C'\fR commands.
.PP
This \f(CW\*(C`tiddlywiki\*(C'\fR command creates a new wiki in memory. It is not possible to
perform any more operations on this wiki in the same command that loads the
files, so the wiki is saved to a temporary directory. This saved version of the
wiki will be further altered with more \f(CW\*(C`tiddlywiki\*(C'\fR commands.
.PP
Here is a sample \f(CW\*(C`tiddlywiki\*(C'\fR command in which plugin files are located in
\&\fR\f(CI$PLUG_DIR\fR\fI\fR, custom files are located in \fI\fR\f(CI$EXTRA\fR\fI\fR, and the wiki is saved to
the \fI\fR\f(CI$TMP\fR\fI\fR directory:
.PP
.Vb 10
\&    tiddlywiki \e
\&        \-\-load $PLUG_DIR/macros.tid \e
\&        \-\-load $PLUG_DIR/macros\-helper.tid \e
\&        \-\-load $PLUG_DIR/style\-sets.tid \e
\&        \-\-load $PLUG_DIR/plugin.info \e
\&        \-\-load $PLUG_DIR/doc/credits.tid \e
\&        \-\-load $PLUG_DIR/doc/dependencies.tid \e
\&        \-\-load $PLUG_DIR/doc/license.tid \e
\&        \-\-load $PLUG_DIR/doc/readme.tid \e
\&        \-\-load $PLUG_DIR/doc/usage.tid \e
\&        \-\-load $PLUG_DIR/js/enlist\-operator.js \e
\&        \-\-load $PLUG_DIR/js/uuid\-macro.js \e
\&        \-\-load $EXTRA/plugintiddlerstype.tid \e
\&        \-\-load $EXTRA/plugintiddlerstext.tid \e
\&        \-\-load $EXTRA/plugintiddlerstext.js \e
\&        \-\-savewikifolder $TMP
.Ve
.PP
\fIAdd plugin tiddlers to parent plugin tiddler\fR
.IX Subsection "Add plugin tiddlers to parent plugin tiddler"
.PP
When a plugin is created in tiddlywiki a "parent" plugin tiddler is created
having the same name as the plugin, e.g., \fR\f(CI$:\fR\fI/plugins/AUTHOR/PLUGIN\fR. In this
step the plugin files are added to the "text" field of the "parent" tiddler as
a stringified json object. This is done using the \fIplugintiddlerstext\fR macro
and \fIplugin-tiddlers-text\fR template imported earlier.
.PP
In addition, the "parent" plugin tiddler "type" is set to "application/json"
using the \fIplugin-tiddlers-type\fR template imported earlier.
.PP
Here is an example command used in this step. Once again it is not possible to
performs any further operations on the wiki in this command other than the
\&\f(CW\*(C`\-\-setfield\*(C'\fR operations. There is no way to save the altered wiki in place, so
it is saved to another temporary directory, in this example the one specified
in \fR\f(CI$FINAL\fR\fI\fR.
.PP
.Vb 10
\&    tiddlywiki $TMP \e
\&        \-\-setfield \e
\&            "[[$:/plugins/.dtn/insert\-table]]" \e
\&            "text" \e
\&            "$:/.dtn/templates/plugin\-tiddlers\-text" \e
\&            "text/plain" \e
\&        \-\-setfield \e
\&            "[[$:/plugins/.dtn/insert\-table]]" \e
\&            "type" \e
\&            "$:/.dtn/templates/plugin\-tiddlers\-type" \e
\&            "text/plain" \e
\&        \-\-savewikifolder \e
\&            $FINAL
.Ve
.PP
\fIWrite plugin file to disk\fR
.IX Subsection "Write plugin file to disk"
.PP
In this step the "parent" plugin tiddler, which now contains all the plugin
tiddlers in its "text" field, is exported to disk. It can be exported in "tid"
or "json" format. The name of the file is derived from the plugin tiddler title
using standard tiddlywiki conventions, i.e., any \f(CW\*(C`/\*(C'\fR and \f(CW\*(C`:\*(C'\fR characters are
converted to \f(CW\*(C`_\*(C'\fR.
.PP
This is an example command outputting to "tid" format:
.PP
.Vb 6
\&    tiddlywiki $FINAL \e
\&        \-\-render \e
\&            "[[$:/plugins/.dtn/insert\-table]]" \e
\&            "\e$_\|_plugins_.dtn_insert\-table.tid" \e
\&            "text/plain" \e
\&            "$:/core/templates/tid\-tiddler"
.Ve
.PP
This is an example command outputting to "json" format:
.PP
.Vb 6
\&    tiddlywiki $FINAL \e
\&        \-\-render \e
\&            "[[$:/plugins/.dtn/insert\-table]]" \e
\&            \*(Aq$_\|_plugins_.dtn_insert\-table.json\*(Aq \e
\&            "text/plain" \e
\&            "$:/core/templates/json\-tiddler"
.Ve
.PP
Note the filename given as the second parameter to the \f(CW\*(C`\-\-render\*(C'\fR command. The
\&\f(CW\*(C`$\*(C'\fR requires special care: if using double quotes it must be
backslash-escaped, but escaping is unnecessary if using single quotes.
.PP
The file is written to the \fIoutput\fR subdirectory of the wiki. In the example
above, the output plugin file would be written to \fR\f(CI$FINAL\fR\fI/output\fR.
.PP
\fICopy the output file to the current directory\fR
.IX Subsection "Copy the output file to the current directory"
.PP
If the current directory already contains a file with the same name as the
output plugin file, the user is asked whether or not to overwrite it.
.SH CONFIGURATION
.IX Header "CONFIGURATION"
.SS Arguments
.IX Subsection "Arguments"
\fIplugin_directory\fR
.IX Subsection "plugin_directory"
.PP
Path of the plugin's root directory. Directory path. Required.
.SS Options
.IX Subsection "Options"
\fI\-f | \-\-format FORMAT\fR
.IX Subsection "-f | --format FORMAT"
.PP
Format of output plugin file. String. Allowed values: 'tid' or 'json'.
Optional. Default: 'tid'.
.PP
\fI\-h | \-\-help\fR
.IX Subsection "-h | --help"
.PP
Display help and exit. Flag. Optional. Default: false.
.SS Attributes
.IX Subsection "Attributes"
None.
.SS "Configuration files"
.IX Subsection "Configuration files"
None used.
.SS "Environment variables"
.IX Subsection "Environment variables"
None used.
.SH SUBROUTINES/METHODS
.IX Header "SUBROUTINES/METHODS"
.SS \fBrun()\fP
.IX Subsection "run()"
The only public method. It compact a server-type TiddlyWiki plugin into a
single file as described in "DESCRIPTION".
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.SS "Fatal error messages"
.IX Subsection "Fatal error messages"
\fICannot read file 'FILE'\fR
.IX Subsection "Cannot read file 'FILE'"
.PP
This error occurs when a file's content cannot be read, most likely because the
user does not have permission to read it.
.PP
\fIExpected 1 command line argument, got N\fR
.IX Subsection "Expected 1 command line argument, got N"
.PP
This occurs if multiple arguments are provided on the command line. Note that
this error may occur if a single directory contains unescaped spaces.
.PP
\fIExpected 1 format, got N\fR
.IX Subsection "Expected 1 format, got N"
.PP
This error occurs if the user provides multiple \f(CW\*(C`f\*(C'\fR (\f(CW\*(C`\-\-format\*(C'\fR) options.
.PP
\fIExpected 1 output file in 'DIR' found N\fR
.IX Subsection "Expected 1 output file in 'DIR' found N"
.PP
This error indicates that plugin file output went awry. Specifically, the
output directory contains too many files, i.e., more than one.
.PP
\fIExpected string or arrayref, got REF\fR
.IX Subsection "Expected string or arrayref, got REF"
.PP
This error occurs when attempting to read a json plugin file to extract the
"title" field value. It indicates the data provided to the extraction method
was neither a string or an array reference. This is an internal script error
that should not occur in normal operation.
.PP
\fIExpected strings, got a REF\fR
.IX Subsection "Expected strings, got a REF"
.PP
This error occurs when attempting to read a json plugin file to extract the
"title" field value. It indicates that an array reference provided to the
extraction method contained content other than scalar strings. This is an
internal script error that should not occur in normal operation.
.PP
\fIFound js comment in non-js file FILE\fR
.IX Subsection "Found js comment in non-js file FILE"
.PP
This error occurs when attempting to parse a plugin file to determine the title
of the contained tiddler, and select the appropriate deserializer.
Specifically, the parsing routine thought it was processing a non-javascript
file but encountered a javascript comment line.
.PP
\fIImport command failed\fR
.IX Subsection "Import command failed"
.PP
This error occurs if the import command fails. The shell error message is
displayed before this error.
.PP
\fIInvalid format 'FORMAT'\fR
.IX Subsection "Invalid format 'FORMAT'"
.PP
The only valid formats are "tid" and "json". This error occurs if any other
format is specified with the \f(CW\*(C`\-f\*(C'\fR (\f(CW\*(C`\-\-format\*(C'\fR) option.
.PP
\fIMissing executable 'tiddlywiki'\fR
.IX Subsection "Missing executable 'tiddlywiki'"
.PP
This error occurs when the \f(CW\*(C`which\*(C'\fR command (as implemented by the
\&\f(CW\*(C`File::Which\*(C'\fR module) is unable to locate the \f(CW\*(C`tiddlywiki\*(C'\fR executable.
.PP
\fINo directory name provided\fR
.IX Subsection "No directory name provided"
.PP
This occurs if no argument is supplied on the command line.
.PP
\fINo file marker found before processing 'LINE'\fR
.IX Subsection "No file marker found before processing 'LINE'"
.PP
This error should never occur in normal operation and indicates something has
altered the DATA section of the script. The DATA section consists of content
for macro and template files, with token lines indicating which file the
following DATA contents is intended for. It will be readily appreciated that
the first line of DATA has to be a token line. This error occurs if that is not
the case.
.PP
\fINo output files created in 'DIR'\fR
.IX Subsection "No output files created in 'DIR'"
.PP
This error indicates that plugin file output failed. Specifically, the output
directory contains no files.
.PP
\fIOutput command failed\fR
.IX Subsection "Output command failed"
.PP
This error occurs if the plugin file output command fails. The shell error
message is displayed before this error.
.PP
\fIOutput directory 'DIR' NOT created\fR
.IX Subsection "Output directory 'DIR' NOT created"
.PP
This error indicates that plugin file output failed. Specifically, the output
directory which is autocreated during successful output was not created.
.PP
\fIOutput file 'FILE' already exists\fR
.IX Subsection "Output file 'FILE' already exists"
.PP
This error is theoretically impossible since a check is made for an existing
file just before writing, but \fIin theory\fR another process could create a file
of the same name between the file name check and the file writing.
.PP
\fIPack command failed\fR
.IX Subsection "Pack command failed"
.PP
This error occurs if the attempt to add the plugin's tiddler to the "parent"
plugin tiddler's "text" field fails. The shell error message is displayed
before this error.
.PP
\fIThe tiddlywiki version (VER) does not have the...\fR
.IX Subsection "The tiddlywiki version (VER) does not have the..."
.PP
The full text of this multi-line error is:
.PP
.Vb 3
\&    The tiddlywiki version (VER) does not have the
\&    same number of elements as the minimum
\&    specified version (MIN)
.Ve
.PP
This is largely self-explanatory. Note that tiddlywiki uses standard
semantic\ versioning\ <https://semver.org/> in which each version string has
three dot-separated elements: "major.minor.patch".
.PP
\fItiddlywiki is vVER, need at least vMIN\fR
.IX Subsection "tiddlywiki is vVER, need at least vMIN"
.PP
This error occurs if the \f(CW\*(C`tiddlywiki\*(C'\fR executable does not meet the minimum
version requirement.
.PP
\fIUnable to copy 'FILE' to 'DIR': ERROR\fR
.IX Subsection "Unable to copy 'FILE' to 'DIR': ERROR"
.PP
This error indicates that the plugin file was successfully output but an error
occurred when attempting copy it to the current directory. The shell's error
message is displayed at the end of this message.
.PP
\fIUnable to extract title from FILE\fR
.IX Subsection "Unable to extract title from FILE"
.PP
This error occurs when attempting to parse a plugin file to determine the title
of the contained tiddler, and select the appropriate deserializer. It indicates
the routine has encountered a file whose content it is unable to successfully
analyse.
.PP
\fIUnable to select deserializer for FILE\fR
.IX Subsection "Unable to select deserializer for FILE"
.PP
This error occurs when attempting to parse a plugin file to determine the title
of the contained tiddler, and select the appropriate deserializer. It indicates
the routine has encountered a file whose content it is unable to successfully
analyse.
.PP
\fIUnable to write 'FILE'\fR
.IX Subsection "Unable to write 'FILE'"
.PP
This occurs when the file system is unable to write to the current directory.
.PP
\fIUnexpected content in FILE at line NUM\fR
.IX Subsection "Unexpected content in FILE at line NUM"
.PP
This error occurs when attempting to parse a plugin file to determine the title
of the contained tiddler, and select the appropriate deserializer. It indicates
the parsing routine has encountered a line it has not been programmed to
process.
.PP
\fIVersion command failed\fR
.IX Subsection "Version command failed"
.PP
This error occurs if the command \f(CW\*(C`tiddlywiki \-\-version\*(C'\fR command fails. The
shell error message is displayed before this error.
.SS "Warning messages"
.IX Subsection "Warning messages"
\fIOutput file 'FILE' already exists\fR
.IX Subsection "Output file 'FILE' already exists"
.PP
This warning is issued if the current directory already contains a file with
the same name as the plugin output file. The user is asked "Overwrite existing
file?". If the user answers in the affirmative, the file is overwritten. If the
user answers in the negative, the scripts exits with the message "Okay,
aborting now...".
.SH INCOMPATIBILITIES
.IX Header "INCOMPATIBILITIES"
None known.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs to the author.
.SH DEPENDENCIES
.IX Header "DEPENDENCIES"
.SS "Perl modules"
.IX Subsection "Perl modules"
Carp, Const::Fast, English, File::Basename, File::Copy, File::Find::Rule,
File::Spec, File::Which, IPC::Cmd, JSON::MaybeXS, Moo, MooX::HandlesVia,
MooX::Options, namespace::clean, Path::Tiny, strictures, Term::Clui,
Types::Path::Tiny, Types::Standard, version.
.SH AUTHOR
.IX Header "AUTHOR"
David Nebauer <david@nebauer.org>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2024 David Nebauer <david@nebauer.org>
.PP
This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
