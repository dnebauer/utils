#!/usr/bin/perl

use Moo;
use strictures 2;
use 5.006;
use 5.038_001;
use version; our $VERSION = qv('0.4');
use namespace::clean;
use Const::Fast;
use Daemon::Control;
use Getopt::Long;

const my $DELAY => 300;

# handle options

my ($conf_dir, $delay) = (q{}, $DELAY);

Getopt::Long::GetOptions(
  'conf_dir|c' => \$conf_dir,
  'delay|d=i'  => \$delay,
);

my $args = [ '--delay', $delay ];
if ($conf_dir) { push @{$args}, '--conf_dir', $conf_dir; }

# run daemon

# for documentation on the variables in the initialisation hash keys
# 'lsb_start' and 'lsb_stop' see the Daemon::Control manpage, which refers to
# <http://wiki.debian.org/LSBInitScripts>, which in turn refers to
# <https://refspecs.linuxfoundation.org/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/facilname.html>.

## no critic (RequireInterpolationOfMetachars, ProhibitDuplicateLiteral)
exit Daemon::Control->new(
  name         => 'Mail Directory Monitor',
  program      => '/usr/sbin/mail-dir-monitor',
  program_args => $args,
  path         => '/usr/sbin/mail-dir-launcher',
  pid_file     => '/var/run/mail-dir-monitor.pid',
  kill_timeout => 5,
  lsb_start    => '$syslog $local_fs $named $time',
  lsb_stop     => '$syslog $local_fs $named $time',
  lsb_sdesc    => 'A daemon which controls the mail-dir-monitor utility',
  lsb_desc     => 'Monitor mail queue directories for stuck files',
)->run;
## use critic

# POD    {{{1

__END__

=head1 NAME

mail-dir-launcher - launcher for mail-dir-monitor daemon

=head1 USAGE

B<mail-dir-launcher> [B<-c>] [B<-d>]

B<mail-dir-launcher> B<-h>

=head1 DESCRIPTION

Launch and daemonise the C<mail-dir-monitor> daemon which monitors mail queue
directories for unsent, or "stuck", email messages. See help for
C<mail-dir-monitor> for further information.

=head1 CONFIGURATION

None required.

=head1 REQUIRED ARGUMENTS

None required.

=head1 OPTIONS

=over

=item B<-c>  B<--conf_dir>

Display path to configuration directory and exit.

Boolean. Optional. Default: false.

=item B<-d>  B<--delay>

Delay in seconds between checking mail queue directories. Do not make this too
short or false errors may be generated by large emails which take a significant
amount of time to send.

Integer. Optional. Default: 300 (5 minutes).

=item B<-h>

Display help and exit.

=back

=head1 EXIT STATUS

The exit code is 0 for successful execution and 1 if the script does a
controlled exit following an error. If the script crashes unexpectedly
the error code is that given by the system.

=head1 DIAGNOSTICS

This script emits no custom error or warning messages. It does invoke
S<< F<mail-dir-monitor> >> as a daemon, however, so see that script's
documentation for diagnostic messabes it my emit.

=head1 INCOMPATIBILITIES

None reported.

=head1 DEPENDENCIES

=head2 Perl modules

Const::Fast, Daemon::Control, Getopt::Long, Moo, namespace::clean, strictures,
version.

=head2 Executables

mail-dir-monitor.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head1 SEE ALSO

=over

=item mail-dir-monitor

The daemon process launched by this script.

=back

=head1 AUTHOR

David Nebauer (david at nebauer dot org)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2024 David Nebauer (david at nebauer dot org)

This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut

# vim:foldmethod=marker:
