#!/usr/bin/perl

# preamble    # {{{1
use Moo;
use strictures 2;
use 5.006;
use 5.038_001;
use version; our $VERSION = qv('0.4');
use namespace::clean;

# }}}1

{

  package Dn::Internal;

  # preamble    {{{1
  use Moo;
  use strictures 2;
  use namespace::clean -except => [ '_options_data', '_options_config' ];
  use Mail::Dir::Monitor;
  use MooX::Options protect_argv => 0;    # }}}1

  # options

  # conf_dir (-c)    {{{1
  option 'conf_dir' => (
    is    => 'ro',
    short => 'c',
    doc   => 'Print the configuration directory and exit',
  );

  # delay    (-d)    {{{1
  option 'delay' => (
    is      => 'ro',
    short   => 'd',
    format  => 'i',
    default => 300,
    doc     => 'Delay (secs) between checks (default: 300 [5 mins])',
  );    # }}}1

  # methods

  # main()    {{{1
  #
  # does:   main method
  # params: nil
  # prints: feedback
  # return: n/a, dies on failure
  sub main ($self) {    ## no critic (RequireInterpolationOfMetachars)

    my $monitor = Mail::Dir::Monitor->new(
      config_dir     => $self->conf_dir,
      check_interval => $self->delay,
    );
    $monitor->run;

    return;
  }                     # }}}1

}

my $p = Dn::Internal->new_with_options->main;

1;

# POD    {{{1

__END__

=head1 NAME

mail-dir-monitor - daemon to monitor mail queue directories

=head1 USAGE

B<mail-dir-monitor> [B<-c>] [B<-d>]

B<mail-dir-monitor> B<-h>

=head1 DESCRIPTION

Users whose email client handles all aspects of email management from checking
for, downloading, reading, composing and sending email messages do not need
this daemon. They should stop reading now and move on.

Some users, for inexplicable reasons, use different utilities to manage
different email tasks. For example, C<offlineimap> to download mail, C<notmuch>
to index, thread and search mail, C<mutt> (terminal) or C<astroid> (gui) to
read and compose mail, and C<msmtp> to send mail. In these configurations mail
for sending is often written to a directory where these messages are queued
before being sent. When the user's internet connection is interrupted these
messages cannot be sent and, depending on the configuration and fuctionality of
the email-related programs, such messages may become stranded and not sent even
when internet connectivity is restored. This daemon is designed to be useful in
this very specific situation.

This is a daemon which monitors mail queue directories for "stuck" mail which
remains unsent. If any files are found on two consecutive scans, the details
are written to the system log. The user who owns the mail queue may optionally
be notified by local user mail and by a message sent to their active terminal
with the C<write> utility. Whether these notification are sent depends on how
the mail queue directories are configured (see L</"CONFIGURATION AND
ENVIRONMENT"> for further details). Log messages are also written during
startup when configuration files are read (also discussed in
L</"CONFIGURATION AND ENVIRONMENT">).

=head1 CONFIGURATION

=head2 Configuration directory and files

There is a system-wide configuration directory. Running this script with the
C<--conf_dir> option will print the configuration directory path for your
system to the console. The directory path is most likely
F<@sysconf_dir@/mail-dir-monitor.d>, but the definitive value is obtained with
the C<--conf_dir> option. All files in the configuration directory are read at
startup.

Each configuration file should use ini format and define a single mail queue
directory. It does so by defining three required values (C<dir>, C<name> and
C<user>) and three optional values (C<mail>, C<mask> and C<write>), explained
further below. For options requiring boolean values use 1 and 0 for true and
false, respectively; other values will cause the script to die on startup.

=over

=item dir

The path to the directory.

String. Required.

=item mail

Whether to notify user of blocked email messages by sending an email to their
local user account using the C<mail> utility that is standard on *nix systems.
Will have no effect if no C<mail> executable is available.

Note that most systems are not set up by default to notify a user when local
user mail is received -- local user mail is handled differently to email
received from an ISP. The only notification is that users receive a message in
their terminal the next time they log into it. Users who rely on a graphical
user interface and do not use terminals will never see any notifications
regarding local user mail.

Boolean. Optional. Default: FALSE.

=item mask

By default this script monitors all files in a mail queue directory. Sometimes,
however, it may be preferable to monitor only a particular type of file. For
example, in mail configurations including msmtp each email sent can result in
two files being created in the mail queue directory: a F<.msmtp> file and a
F<.mail> file. Since notification messages include a list of "stuck" files, to
minimise message size it may be desirable to monitor only one of those two file
types.

This is done by specifying a regular expression that matches the file type to
be monitored. Only the expression itself need by specified. For example, to
specify F<.msmtp> files you may use the value "[.]msmtp\Z". This will be
converted internally into the regular expression

    qr/[.]msmtp\Z/xsm

String. Optional. Default: ".*".

=item name

A human readable name for the directory intended to be used in user feedback.
The name can consist of multiple words. It should fit naturally into the
following sentence instead of NAME: "The NAME has stuck email files."

String. Required.

=item user

User login name of the owner of the mail queue. This is used for sending direct
feedback via local mail and terminal messages, so if there is any confusion
over the ownership of a mail queue, choose the user to whom notifications
should be sent. This value is required even if both C<mail> and C<write> are to
be left disabled.

Boolean. Optional. Default: FALSE.

=item write

Whether to notify user of blocked email messages by sending a message directly
to their terminal using the C<write> utility that is standard on *nix systems.
Will have no effect if no C<write> executable is available.

Individual users can configure their terminals to not receive C<write>
messages, though on most system the default for users is to allow display of
such messages. See the manpage for C<write> for more details.

There are a number of circumstances in which it may be inadvisable to utilise
this method of notification:

=over

=item *

Users who rely on a graphical user environment and do not use terminals.

=item *

Users who primarily use terminals for console editors, such as vim, as the
messages sent by write will disrupt the editor display.

=item *

Users who routinely use multiple terminals and/or terminal multiplexers, as the
message will be sent to only one terminal and that terminal may not be visible
to the user at the time the message is sent.

=back

Boolean. Optional. Default: FALSE.

=back

=head2 Logging

Module L<Logger::Syslog|Logger::Syslog> is used for logging. Note that not all
message levels appear in all system logs. On debian, for example, log file
F</var/log/messages> records only info and warning messages while
F</var/log/syslog> records messages of all levels.

This script generates only info and warning level messages.

=head1 REQUIRED ARGUMENTS

None.

=head1 OPTIONS

=over

=item B<-c>  B<--conf_dir>

Display path to configuration directory and exit.

Boolean. Optional. Default: false.

=item B<-d>  B<--delay>

Delay in seconds between checking mail queue directories. Do not make this too
short or false errors may be generated by large emails which take a significant
amount of time to send.

Integer. Optional. Default: 300 (5 minutes).

=item B<-h>

Display help and exit.

=back

=head1 EXIT STATUS

The exit code is 0 for successful execution and 1 if the script does a
controlled exit following an error. If the script crashes unexpectedly the
error code is that given by the system.

=head1 DIAGNOSTICS

This script emits no custom error or warning messages, but does daemonise the
L<Mail::Dir::Monitor> module, so check its documentation for information on
diagnostic messages.

=head1 INCOMPATIBILITIES

None reported.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head1 DEPENDENCIES

=head2 Perl modules

Mail::Dir::Monitor, Moo, MooX::Options, namespace::clean, strictures, version.

=head1 AUTHOR

David Nebauer (david at nebauer dot org)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2024 David Nebauer (david at nebauer dot org)

This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut

# vim:foldmethod=marker:
