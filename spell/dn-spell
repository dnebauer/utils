#!/bin/bash

# File: dn-spell
# Author: David Nebauer
# Purpose: Check spelling of word(s)
# Created: 2009-05-14 Created

# VARIABLES

args="${*}"
msg="Loading libraries"
echo -ne "\\033[1;37;41m${msg}\\033[0m"
# shellcheck disable=SC1091
source "@libexec_dir@/libdncommon-bash/liball" # supplies functions
dnEraseText "${msg}"
# libdncommon-bash provides variable - declare to avoid SC2154
#declare dn_self dn_true dn_false OPTARG
usage="Usage:"
parameters="word [word...]"
args=""
unset msg

# PROCEDURES

# Show usage
#   params: nil
#   prints: nil
#   return: nil
displayUsage() {
	# dn_self provided by lbdncommon-bash library
	# shellcheck disable=SC2154
	cat <<_USAGE
${dn_self}: check word spelling

Uses 'ispell' to check word spelling and provide
suggestions in the case of misspelled words.

${usage} ${dn_self} ${parameters}
       ${dn_self} -h
_USAGE
}
# Process command line
#   params: all command line parameters
#   prints: feedback
#   return: nil
processCommandLine() {
	# Read the command line options
	#   - if optstring starts with ':' then error reporting is suppressed
	#     leave ':' at start as '\?' and '\:' error capturing require it
	#   - if option is followed by ':' then it is expected to have an argument
	while getopts ":h" opt; do
		case ${opt} in
		'h') displayUsage && exit 0 ;;
		\?)
			echo -e "Error: Invalid flag '${OPTARG}' detected"
			echo -e "Usage: ${dn_self} ${parameters}"
			echo -e "Try '${dn_self} -h' for help"
			echo -ne "\a"
			exit 1
			;;
		':')
			echo -e "Error: No argument supplied for flag '${OPTARG}'"
			echo -e "Usage: ${dn_self} ${parameters}"
			echo -e "Try '${dn_self} -h' for help"
			echo -ne "\a"
			exit 1
			;;
		esac
	done
	shift $((OPTIND - 1))
	args="${*}" # reset arguments
	unset usage parameters
}
# Send output to table output file
#   params: 1 - first column content
#           2 - second column content [optional]
#   prints: nil
#   return: nil
#   note:   appends output to 'table' variable
tblRow() {
	local output="${1}"
	# add second column if content provided
	(($# > 1)) && [ -n "${2}" ] && output="${output}\t${2}"
	# append to table output file
	table="${table}\n${output}"
}

# MAIN

# Process command line
processCommandLine "${@}"
while [ "${*}" != "${args}" ]; do shift; done
unset args

# Check arguments
# - check that argument supplied
[ ${#} -gt 0 ] || dnFailScript "1" "no word(s) supplied"
# - requires ispell
which "ispell" &>/dev/null ||
	dnEndScript "1" "cannot find 'ispell'"

# Informational message
dnInfo "${dn_self} is running..."
words=("${@}")
fragment="word"
[ ${#words[@]} -gt 1 ] && fragment="words"
dnInfo "checking spelling of ${#words[@]} ${fragment}:"
unset fragment

# get ispell results for word list
# delete first line as that is ispell's version identification message
# delete last row as that is blank
# -S: sort guesses by probable correctness
# -o: treat input as ordinary text
# -B: treat run-together words with missing blanks as spelling errors
# -a: change output format for each word's report:
#     '*'
#         word is found in dictionaries
#     '-'
#         word itself not found in dictionaries but is formed from a compound
#         of words that are found in dictionaries
#     '+ <root>'
#         word itself is not found in dictionaries but removal of an affix
#         (prefix or suffix) gives a word that is found in dictionaries
#     '& <original> <miss_count> <offset>: <miss>, <miss>, ..., <guess>, ...'
#         word itself is not found in dictionaries but there are near misses
#         (and guesses)
#     '? <original> 0 <offset>: <guess>, <guess>, ...'
#         word itself is not found in dictionaries and there are no near
#         misses, only guesses -- guesses are suggested alternatives formed by
#         adding illegal affixes to known roots
#     '# <original> <offset>'
#         word itself is not found in dictionaries and there are no near misses
declare -a spellcheck
mapfile -t spellcheck < <(echo "${words[@]}" | ispell -S -o -B -a | sed -e '1d' | sed -e '$d')
if [ ${#words[@]} -ne ${#spellcheck[@]} ]; then
	dnEndScript "1" "Internal error: unequal arrays"
fi

# preprocess ispell output to determine
# - whether output requires one or two columns
# - whether column two needs to be expanded
cols=1
#dn_false provided by lbdncommon-bash library
# shellcheck disable=SC2154
expand=${dn_false}
for line in "${spellcheck[@]}"; do
	mark="${line:0:1}"
	if [ "${mark}" = '+' ]; then # root
		cols=2
	elif [ "${mark}" = '-' ]; then # compound
		cols=2
	elif [ "${mark}" = '&' ] || [ "${mark}" = '?' ]; then # miss/guess
		cols=2
		# shellcheck disable=SC2001
		suggest="$(echo "${line}" | sed -e "s/^.*: \(.*\)$/\1/")"
		suggest="${suggest//, /', '}"
		# dn_true provided by lbdncommon-bash library
		# shellcheck disable=SC2154
		[ ${#suggest} -gt 20 ] && expand=${dn_true}
	fi
done

# will use groff for output
table=""
tblRow ".na"               # make text blocks ragged right
tblRow ".TS"               # start table
tblRow ";"                 # no global options
if [ ${cols} -eq 1 ]; then # one column
	tblRow "l."
else                             # two columns
	if dnFlagTrue "${expand}"; then # expand second column
		tblRow "l\tlx."
	else # do not expand second column
		tblRow "l\tl."
	fi
fi
tblRow "_" # divider line

# loop through words generating table output
right="\\[OK]"
wrong="x"
maybe="?"
for ((i = 0; i < ${#words[@]}; i++)); do
	word="${words[${i}]}"
	mark="${spellcheck[${i}]:0:1}"
	if [ "${mark}" = '*' ]; then # correct
		tblRow "  ${right} ${word}"
	elif [ "${mark}" = '+' ]; then # root
		# shellcheck disable=SC2001
		root="$(echo "${spellcheck[${i}]}" | sed -e "s/^\\+ //")"
		tblRow "  ${maybe} ${word}:" "perhaps formed from '${root}'?"
	elif [ "${mark}" = '-' ]; then # compound
		tblRow "  ${maybe} ${word}:" "perhaps a compound word?"
	elif [ "${mark}" = '&' ] || [ "${mark}" = '?' ]; then # miss/guess
		# shellcheck disable=SC2001
		suggest="$(echo "${spellcheck[${i}]}" | sed -e "s/^.*: \(.*\)$/\1/")"
		suggest="${suggest//, /', '}"
		# shellcheck disable=SC2001
		suggest="'$(echo "${suggest}" | sed -e "s/, /', '/g")'"
		tblRow "  ${wrong} ${word}:" "T{\nperhaps ${suggest}?\nT}"
	elif [ "${mark}" = '#' ]; then # none
		tblRow "  ${wrong} ${word}"
	else # unknown
		dnEndScript "1" "Internal error: invalid mark"
	fi
	tblRow "_" # divider line
done
tblRow ".TE" # end table
tblRow ".ad" # end of ragged right for table text

# output groff table
# - for some reason groff generates a lot of blank lines at the end of the
#   table, so they are removed with sed before display
echo -e "${table}" | tbl | groff -Tutf8 2>/dev/null | sed -e '/^$/d'

# done
dnEndScript "-"
