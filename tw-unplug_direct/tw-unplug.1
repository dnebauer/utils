.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TW-UNPLUG 1"
.TH TW-UNPLUG 1 "2019-09-29" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
tw\-unplug \- convert single json TiddlyWiki plugin file
.SH "USAGE"
.IX Header "USAGE"
\&\fBtw-unplug\fR [\fB\-c\fR \fIconfig_file\fR] \fBplugin_file\fR
.PP
\&\fBtw-unplug \-t\fR
.PP
\&\fBtw-unplug \-h\fR
.SH "REQUIRED ARGUMENTS"
.IX Header "REQUIRED ARGUMENTS"
.IP "\fBplugin_file\fR" 4
.IX Item "plugin_file"
Path of the json plugin file to be converted.
.Sp
File path. Required.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-c\fR  \fB\-\-config\fR" 4
.IX Item "-c --config"
Configuration file path.
.Sp
Optional. No default.
.IP "\fB\-t\fR  \fB\-\-config_template\fR" 4
.IX Item "-t --config_template"
Whether to write a template file named \fIconfig.json\fR to the current directory.
If this flag is present and true the file is written and the script exits, and
any other command line options or arguments are ignored.
.Sp
Boolean. Optional. Default: false.
.IP "\fB\-h\fR" 4
.IX Item "-h"
Display help and exit.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script converts a single json plugin file for
TiddlyWiki <https://tiddlywiki.com/> into a group of files which can be used
with a node.js server installation of TiddlyWiki. A single file is created for
each plugin tiddler. A \fIplugin.info\fR file is generated. If necessary, a
\&\fItiddlywiki.files\fR file is also generated.
.SS "Output file names"
.IX Subsection "Output file names"
All files are output to the current working directory.
.PP
Tiddler file names are derived from the last element of the \f(CW\*(C`title\*(C'\fR field,
with spaces and colons converted to underscores. It is theoretically possible
(though poor plugin practice) for a plugin to contain two tiddlers with
different titles which nonetheless have the same terminal elements. This causes
a file name clash which is resolved by adding a suffix '_X' to the clashing
file's base name (where 'X' is an integer that ensures uniqueness). For
example, if the file names derived from two tiddler titles are both
\&\fImy_tiddler.tid\fR, the second file name becomes \fImy_tiddler_1.tid\fR. If a third
tiddler title gives rise to the same file name, it would become
\&\fImy_tiddler_2.tid\fR, and so on. The tiddlers are processed in alphabetical
order by title, so the derived file names are predictable on repeated runs.
Whenever a file name is changed by adding a unique suffix, a message is written
to the console to alert the user.
.PP
When the output files are then written to disk, in each case a check is first
made to see if a file of the same name already exists. If it does, a suffix is
added as per the scheme described in the previous paragraph, and a message is
written to console to alert the user.
.PP
This means that in cases where two tiddlers give rise to the same name (and
thus have a unique suffix added), and also where those tiddlers have already
been output to disk (causing another unique suffix to be added), the final
output file may have a suffix like '_X_Y' where 'X' and 'Y' are integers
ensuring uniqueness.
.SS "External metadata"
.IX Subsection "External metadata"
A tiddler's metadata can be stored in the tiddler's file with the tiddler
content, or it can be stored in another file called \fItiddlywiki.files\fR.
.PP
Tiddler metadata is stored in the tiddler file if the following two conditions
are met:
.IP "\(bu" 4
the tiddler's file extension is \fItid\fR, and
.IP "\(bu" 4
the tiddler's type is \f(CW\*(C`text/vnd\-tiddlywiki\*(C'\fR or \f(CW\*(C`text/x\-tiddlywiki\*(C'\fR.
.PP
This algorithm can be overridden by using a configuration file (see the
\&\*(L"\s-1CONFIGURATION\*(R"\s0 section for details).
.PP
Only metadata fields are stored in the \fItiddlywiki.files\fR file. Only the
\&\f(CW\*(C`tiddlers\*(C'\fR section of the \fItiddlywiki.files\fR file is generated. No other
features of the \fItiddlywiki.files\fR file are used.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Cannot read file '$file'" 4
.IX Item "Cannot read file '$file'"
The specified file could not be read. This is usually because the wrong file
path is given, but could possibly occur if the file exists but the user does
not have permission to read it.
.IP "Output file '$file' already exists" 4
.IX Item "Output file '$file' already exists"
This error is theoretically impossible since a check is made for an existing
file just before writing, but \fIin theory\fR another process could create a file
of the same name between the file name check and the file writing.
.IP "Unable to write '$file'" 4
.IX Item "Unable to write '$file'"
This occurs when the file system is unable to write to the current directory.
.ie n .IP "Unexpected input file content at line $lineno" 4
.el .IP "Unexpected input file content at line \f(CW$lineno\fR" 4
.IX Item "Unexpected input file content at line $lineno"
This occurs when the input plugin file does not conform to the usual layout.
The expected file structure is metadata lines, each of the format \*(L"name:
value\*(R", followed by an empty line, and then followed by json content.
.Sp
The json content is expected to commence with a left brace (\f(CW\*(C`{\*(C'\fR) on its own
line and end with a right brace (\f(CW\*(C`}\*(C'\fR} on its own line.
.IP "Warning: config file refers to non-existent tiddler file(s)" 4
.IX Item "Warning: config file refers to non-existent tiddler file(s)"
This warning is issued when the specified configuration file contains output
file names which do not match any file names derived from the input plugin
file. This is a non-fatal warning.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.SS "Perl modules"
.IX Subsection "Perl modules"
Carp, Const::Fast, File::Basename, File::Find::Rule, Function::Parameters,
JSON::MaybeXS, List::SomeUtils, Moo, MooX::HandlesVia, MooX::Options,
namespace::clean, Path::Tiny;, strictures, Types::Path::Tiny, Types::Standard,
version.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
This script can use a configuration file. There is no default location or name
for a configuration file; the file path of the configuration file must be
specified on the command line with the \f(CW\*(C`\-c\*(C'\fR option.
.PP
The configuration can be used to override the usual algorithm which determining
whether tiddler metadata is stored in the tiddler's own file or in the external
metadata file \fItiddlywiki.files\fR. (See the \*(L"External metadata\*(R" section for
details of the usual algorithm.)
.PP
The configuration file must be in json format. The template skeleton is:
.PP
.Vb 8
\&    {
\&       "overrides": {
\&          "metadata": {
\&             "in_tiddler": [],
\&             "in_tw_files": []
\&          }
\&       }
\&    }
.Ve
.PP
This should be fairly self explanatory: tiddlers with output file names in the
\&'in_tiddler' array will be forced to include their metadata in their own output
files, while tiddlers with output file names in the 'in_tw_files' array will be
forced to include their metadata in the \fItiddlywiki.files\fR file.
.PP
Note that the file names given in this file should be the file names derived
from the tiddler title, including a unique suffix if necessary, but \fInot\fR
including a unique suffix added due to a clash with an existing disk file. (See
the \*(L"Output file names\*(R" section for details of file naming.)
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
Exits with a success value (shell 0) if it extracts and writes all output files
successfully. If any error prevents this successful conclusion, the script
exits with an error code (shell 1), unless the failure is caused by an
underlying operating system error, in which case the shell error code is
returned.
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None known.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Nebauer (david at nebauer dot org)
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2019 David Nebauer (david at nebauer dot org)
.PP
This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
