.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SMARTYPANTS 1"
.TH SMARTYPANTS 1 "2012-08-26" "perl v5.30.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SmartyPants \- translates plain ascii punctuation characters into smart typographic html entities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBSmartyPants.pl\fR [ \fB\-1\fR ] [ \fB\-2\fR ] [ \fB\-3\fR ] [ \fB\-\-version\fR ] [ \fB\-\-shortversion\fR ]
    [ \fIfile\fR ... ]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SmartyPants is a web publishing utility that translates plain \s-1ASCII\s0
punctuation characters into \*(L"smart\*(R" typographic punctuation \s-1HTML\s0
entities. SmartyPants can perform the following transformations:
.IP "\(bu" 4
Straight quotes ( \*(L" and ' ) into \*(R"curly" quote \s-1HTML\s0 entities
.IP "\(bu" 4
Backticks-style quotes (``like this'') into \*(L"curly\*(R" quote \s-1HTML\s0 entities
.IP "\(bu" 4
Dashes (\f(CW\*(C`\-\-\*(C'\fR and \f(CW\*(C`\-\-\-\*(C'\fR) into en\- and em-dash entities
.IP "\(bu" 4
Three consecutive dots (\f(CW\*(C`...\*(C'\fR) into an ellipsis entity
.PP
SmartyPants is a combination plug-in \*(-- the same file works with Movable
Type, Blosxom, BBEdit, and as a standalone Perl script. Version
requirements and installation instructions for each of these tools can
be found in the readme file that accompanies this script.
.PP
SmartyPants does not modify characters within \f(CW\*(C`<pre>\*(C'\fR, \f(CW\*(C`<code>\*(C'\fR,
\&\f(CW\*(C`<kbd>\*(C'\fR, \f(CW\*(C`<script>\*(C'\fR, or \f(CW\*(C`<math>\*(C'\fR tag blocks.
Typically, these tags are used to display text where smart quotes and
other \*(L"smart punctuation\*(R" would not be appropriate, such as source code
or example markup.
.SS "Backslash Escapes"
.IX Subsection "Backslash Escapes"
If you need to use literal straight quotes (or plain hyphens and
periods), SmartyPants accepts the following backslash escape sequences
to force non-smart punctuation. It does so by transforming the escape
sequence into a decimal-encoded \s-1HTML\s0 entity:
.PP
.Vb 8
\&              Escape  Value  Character
\&              \-\-\-\-\-\-  \-\-\-\-\-  \-\-\-\-\-\-\-\-\-
\&                \e\e    &#92;    \e
\&                \e"    &#34;    "
\&                \e\*(Aq    &#39;    \*(Aq
\&                \e.    &#46;    .
\&                \e\-    &#45;    \-
\&                \e\`    &#96;    \`
.Ve
.PP
This is useful, for example, when you want to use straight quotes as
foot and inch marks: 6'2\*(L" tall; a 17\*(R" iMac.
.SH "OPTIONS"
.IX Header "OPTIONS"
Use \*(L"\-\-\*(R" to end switch parsing. For example, to open a file named \*(L"\-z\*(R", use:
.PP
.Vb 1
\&        SmartyPants.pl \-\- \-z
.Ve
.IP "\fB\-1\fR" 4
.IX Item "-1"
Performs default SmartyPants transformations: quotes (including
backticks-style), em-dashes, and ellipses. '\-\-' (dash dash) is used to
signify an em-dash; there is no support for en-dashes.
.IP "\fB\-2\fR" 4
.IX Item "-2"
Same as \fB\-1\fR, except that it uses the old-school typewriter shorthand
for dashes: '\-\-' (dash dash) for en-dashes, '\-\-\-' (dash dash dash) for
em-dashes.
.IP "\fB\-3\fR" 4
.IX Item "-3"
Same as \fB\-2\fR, but inverts the shorthand for dashes: '\-\-'
(dash dash) for em-dashes, and '\-\-\-' (dash dash dash) for en-dashes.
.IP "\fB\-v\fR, \fB\-\-version\fR" 4
.IX Item "-v, --version"
Display SmartyPants's version number and copyright information.
.IP "\fB\-s\fR, \fB\-\-shortversion\fR" 4
.IX Item "-s, --shortversion"
Display the short-form version number.
.SH "BUGS"
.IX Header "BUGS"
To file bug reports or feature requests (other than topics listed in the
Caveats section above) please send email to:
.PP
.Vb 1
\&    smartypants@daringfireball.net
.Ve
.PP
If the bug involves quotes being curled the wrong way, please send example
text to illustrate.
.SS "Algorithmic Shortcomings"
.IX Subsection "Algorithmic Shortcomings"
One situation in which quotes will get curled the wrong way is when
apostrophes are used at the start of leading contractions. For example:
.PP
.Vb 1
\&    \*(AqTwas the night before Christmas.
.Ve
.PP
In the case above, SmartyPants will turn the apostrophe into an opening
single-quote, when in fact it should be a closing one. I don't think
this problem can be solved in the general case \*(-- every word processor
I've tried gets this wrong as well. In such cases, it's best to use the
proper \s-1HTML\s0 entity for closing single-quotes (\f(CW\*(C`&#8217;\*(C'\fR) by hand.
.SH "VERSION HISTORY"
.IX Header "VERSION HISTORY"
.Vb 1
\&    1.5.1: Fri 12 Mar 2004
\&    
\&    +   Fixed a goof where if you had SmartyPants 1.5.0 installed,
\&        but didn\*(Aqt have Markdown installed, when SmartyPants checked
\&        for Markdown\*(Aqs presence, it created a blank entry in MT\*(Aqs
\&        global hash of installed text filters. This showed up in MT\*(Aqs
\&        Text Formatting pop\-up menu as a blank entry.
\&
\&
\&    1.5: Tue 9 Mar 2004
\&    
\&    +   Integration with Markdown. If Markdown is already loaded
\&        when SmartyPants loads, SmartyPants will add a new global
\&        text filter, "Markdown With Smartypants".
\&    
\&    +   Preliminary command\-line options parsing. \-1 \-2 \-3
\&        \-v \-V
\&    
\&    +   dot\-space\-dot\-space\-dot now counts as an ellipsis.
\&        This is the style used by Project Gutenberg:
\&        http://www.gutenberg.net/faq/index.shtml#V.110
\&        (Thanks to Fred Condo for the patch.)
\&    
\&    +   Added \`<math>\` to the list of tags to skip (pre, code, etc.).
\&
\&
\&    1.4.1: Sat 8 Nov 2003
\&
\&    +   The bug fix from 1.4 for dashes followed by quotes with no
\&        intervening spaces now actually works.
\&
\&    +   "&nbsp;" now counts as whitespace where necessary. (Thanks to
\&        Greg Knauss for the patch.)
\&
\&
\&    1.4: Mon 30 Jun 2003
\&
\&    +   Improved the HTML tokenizer so that it will parse nested <> pairs
\&        up to five levels deep. Previously, it only parsed up to two
\&        levels. What we *should* do is allow for any arbitrary level of
\&        nesting, but to do so, we would need to use Perl\*(Aqs ?? construct
\&        (see Fried\*(Aqs "Mastering Regular Expressions", 2nd Ed., pp.
\&        328\-331), and sadly, this would only work in Perl 5.6 or later.
\&        SmartyPants still supports Perl 5.00503. I suppose we could test
\&        for the version and build a regex accordingly, but I don\*(Aqt think
\&        I want to maintain two separate patterns.
\&
\&    +   Thanks to Stepan Riha, the tokenizer now handles HTML comments:
\&            <!\-\- comment \-\->
\&
\&        and PHP\-style processor instructions:
\&            <?php code ?>
\&
\&    +   The quote educator now handles situations where dashes are used
\&        without whitespace, e.g.:
\&
\&            "dashes"\-\-without spaces\-\-"are tricky"  
\&
\&    +   Special case for decade abbreviations like this: the \*(Aq80s.
\&        This only works for the sequence appostrophe\-digit\-digit\-s.
\&
\&
\&    1.3: Tue 13 May 2003
\&
\&    +   Plugged the biggest hole in SmartyPants\*(Aqs smart quotes algorithm.
\&        Previous versions were hopelessly confused by single\-character
\&        quote tokens, such as:
\&
\&            <p>"<i>Tricky!</i>"</p>
\&
\&        The problem was that the EducateQuotes() function works on each
\&        token separately, with no means of getting surrounding context
\&        from the previous or next tokens. The solution is to curl these
\&        single\-character quote tokens as a special case, *before* calling
\&        EducateQuotes().
\&
\&    +   New single\-quotes backtick mode for smarty_pants attribute.
\&        The only way to turn it on is to include "B" in the configuration
\&        string, e.g. to translate backtick quotes, dashes, and ellipses:
\&
\&            smarty_pants="Bde"
\&
\&    +   Fixed a bug where an opening quote would get curled the wrong way
\&        if the quote started with three dots, e.g.:
\&
\&            <p>"...meanwhile"</p>
\&
\&    +   Fixed a bug where opening quotes would get curled the wrong way
\&        if there were double sets of quotes within each other, e.g.:
\&
\&            <p>"\*(AqSome\*(Aq people."</p>
\&
\&    +   Due to popular demand, four consecutive dots (....) will now be
\&        turned into an ellipsis followed by a period. Previous versions
\&        would turn this into a period followed by an ellipsis. If you
\&        really want a period\-then\-ellipsis sequence, escape the first
\&        period with a backslash: \e....
\&
\&    +   Removed "&" from our home\-grown punctuation class, since it
\&        denotes an entity, not a literal ampersand punctuation
\&        character. This fixes a bug where SmartyPants would mis\-curl
\&        the opening quote in something like this:
\&
\&            "&#8230;whatever"
\&
\&    +   SmartyPants has always had a special case where it looks for
\&        "\*(Aqs" in situations like this:
\&
\&            <i>Custer</i>\*(Aqs Last Stand
\&
\&        This special case is now case\-insensitive.
\&
\&
\&    1.2.2: Thu Mar 13, 2003
\&
\&    +   1.2.1 contained a boneheaded addition which prevented SmartyPants
\&        from compiling under Perl 5.005. This has been remedied, and is
\&        the only change from 1.2.1.
\&
\&
\&    1.2.1: Mon Mar 10, 2003
\&
\&    +   New "stupefy mode" for smarty_pants attribute. If you set
\&
\&            smarty_pants="\-1"
\&
\&        SmartyPants will perform reverse transformations, turning HTML
\&        entities into plain ASCII equivalents. E.g. "&#8220;" is turned
\&        into a simple double\-quote ("), "&#8212;" is turned into two
\&        dashes, etc. This is useful if you are using SmartyPants from Brad
\&        Choate\*(Aqs MT\-Textile text filter, but wish to suppress smart
\&        punctuation in specific MT templates, such as RSS feeds. Text
\&        filters do their work before templates are processed; but you can
\&        use smarty_pants="\-1" to reverse the transformations in specific
\&        templates.
\&
\&    +   Replaced the POSIX\-style regex character class [:punct:] with an
\&        ugly hard\-coded normal character class of all punctuation; POSIX
\&        classes require Perl 5.6 or later, but SmartyPants still supports
\&        back to 5.005.
\&
\&    +   Several small changes to allow SmartyPants to work when Blosxom
\&        is running in static mode.
\&
\&
\&    1.2: Thu Feb 27, 2003
\&
\&    +   SmartyPants is now a combination plug\-in, supporting both
\&        Movable Type (2.5 or later) and Blosxom (2.0 or later).
\&        It also works as a BBEdit text filter and standalone
\&        command\-line Perl program. Thanks to Rael Dornfest for the
\&        initial Blosxom port (and for the excellent Blosxom plug\-in
\&        API).
\&
\&    +   SmartyPants now accepts the following backslash escapes,
\&        to force non\-smart punctuation. It does so by transforming
\&        the escape sequence into a decimal\-encoded HTML entity: 
\&
\&              Escape  Value  Character
\&              \-\-\-\-\-\-  \-\-\-\-\-  \-\-\-\-\-\-\-\-\-
\&                \e\e    &#92;    \e
\&                \e"    &#34;    "
\&                \e\*(Aq    &#39;    \*(Aq
\&                \e.    &#46;    .
\&                \e\-    &#45;    \-
\&                \e\`    &#96;    \`
\&
\&        Note that this could produce different results than previous
\&        versions of SmartyPants, if for some reason you have an article
\&        containing one or more of these sequences. (Thanks to Charles
\&        Wiltgen for the suggestion.)
\&
\&    +   Added a new option to support inverted en\- and em\-dash notation:
\&        "\-\-" for em\-dashes, "\-\-\-" for en\-dashes. This is compatible with
\&        SmartyPants\*(Aq original "\-\-" syntax for em\-dashes, but also allows
\&        you to specify en\-dashes. It can be invoked by using
\&        smart_dashes="3", smarty_pants="3", or smarty_pants="i". 
\&        (Suggested by Aaron Swartz.)
\&
\&    +   Added a new option to automatically convert &quot; entities into
\&        regular double\-quotes before sending text to EducateQuotes() for
\&        processing. This is mainly for the benefit of people who write
\&        posts using Dreamweaver, which substitutes this entity for any
\&        literal quote char. The one and only way to invoke this option
\&        is to use the letter shortcuts for the smarty_pants attribute;
\&        the shortcut for this option is "w" (for Dream_w_eaver).
\&        (Suggested by Jonathon Delacour.)
\&
\&    +   Added <script> to the list of tags in which SmartyPants doesn\*(Aqt
\&        touch the contents.
\&
\&    +   Fixed a very subtle bug that would occur if a quote was the very
\&        last character in a body of text, preceded immediately by a tag.
\&        Lacking any context, previous versions of SmartyPants would turn
\&        this into an opening quote mark. It\*(Aqs now correctly turned into
\&        a closing one.
\&
\&    +   Opening quotes were being curled the wrong way when the
\&        subsequent character was punctuation. E.g.: "a \*(Aq.foo\*(Aq file".
\&        Fixed.
\&
\&    +   New MT global template tag: <$MTSmartyPantsVersion$>
\&        Prints the version number of SmartyPants, e.g. "1.2".
\&
\&
\&    1.1: Wed Feb 5, 2003
\&
\&    +   The smart_dashes template attribute now offers an option to
\&        use "\-\-" for *en* dashes, and "\-\-\-" for *em* dashes.
\&
\&    +   The default smart_dashes behavior now simply translates "\-\-"
\&        (dash dash) into an em\-dash. Previously, it would look for
\&        " \-\- " (space dash dash space), which was dumb, since many
\&        people do not use spaces around their em dashes.
\&
\&    +   Using the smarty_pants attribute with a value of "2" will
\&        do the same thing as smarty_pants="1", with one difference:
\&        it will use the new shortcuts for en\- and em\-dashes.
\&
\&    +   Closing quotes (single and double) were incorrectly curled in
\&        situations like this:
\&            "<a>foo</a>",
\&        where the comma could be just about any punctuation character.
\&        Fixed.
\&
\&    +   Added <kbd> to the list of tags in which text shouldn\*(Aqt be
\&        educated.
\&
\&
\&    1.0: Wed Nov 13, 2002
\&
\&        Initial release.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&    John Gruber
\&    http://daringfireball.net
.Ve
.SH "ADDITIONAL CREDITS"
.IX Header "ADDITIONAL CREDITS"
Portions of this plug-in are based on Brad Choate's nifty MTRegex plug-in.
Brad Choate also contributed a few bits of source code to this plug-in.
Brad Choate is a fine hacker indeed. (http://bradchoate.com/)
.PP
Jeremy Hedley (http://antipixel.com/) and Charles Wiltgen
(http://playbacktime.com/) deserve mention for exemplary beta testing.
.PP
Rael Dornfest (http://raelity.org/) ported SmartyPants to Blosxom.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
.Vb 3
\&    Copyright (c) 2003 John Gruber
\&    (http://daringfireball.net/)
\&    All rights reserved.
.Ve
.PP
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
.PP
*   Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
.PP
*   Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
.PP
*   Neither the name \*(L"SmartyPants\*(R" nor the names of its contributors may
    be used to endorse or promote products derived from this software
    without specific prior written permission.
.PP
This software is provided by the copyright holders and contributors \*(L"as is\*(R"
and any express or implied warranties, including, but not limited to, the 
implied warranties of merchantability and fitness for a particular purpose 
are disclaimed. In no event shall the copyright owner or contributors be 
liable for any direct, indirect, incidental, special, exemplary, or 
consequential damages (including, but not limited to, procurement of 
substitute goods or services; loss of use, data, or profits; or business 
interruption) however caused and on any theory of liability, whether in 
contract, strict liability, or tort (including negligence or otherwise) 
arising in any way out of the use of this software, even if advised of the
possibility of such damage.
