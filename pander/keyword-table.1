.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "KEYWORD-TABLE 1"
.TH KEYWORD-TABLE 1 "2021-09-06" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
keyword\-table \- generate keyword data table constructors
.SH "USAGE"
.IX Header "USAGE"
\&\fBkeyword-table\fR [\fB\-l\fR] \fBtable\fR
.PP
\&\fBkeyword-table \-h\fR
.SH "REQUIRED ARGUMENTS"
.IX Header "REQUIRED ARGUMENTS"
.IP "\fBtable\fR" 4
.IX Item "table"
The table to build and output a constructor for. Must be one of: 'actions',
\&'conflict', 'describe', 'expand', 'valid'.
.Sp
Scalar string. Required.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-l\fR  \fB\-\-list\-keywords\fR" 4
.IX Item "-l --list-keywords"
List style keywords with descriptions, and then exit.
.IP "\fB\-h\fR  \fB\-\-help\fR" 4
.IX Item "-h --help"
Display help and exit.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Supports pander"
.IX Subsection "Supports pander"
This is a utility script supporting the \f(CW\*(C`pander\*(C'\fR script. The \f(CW\*(C`pander\*(C'\fR script
contains five tables that collectively define a number of style keywords that
can be added to metadata for a markdown document. Each defined style keyword is
associated with metadata settings and command line options that are
collectively used to define a pandoc document conversion command.
.PP
The five tables are:
.IP "\(bu" 4
keyword-actions-data
.Sp
The metadata settings and command line options associated with style keywords.
.IP "\(bu" 4
keyword-conflict-data
.Sp
Defines sets of style keywords that are mutually exclusive, i.e., that cannot
be used together.
.IP "\(bu" 4
keyword-describe-data
.Sp
A description of each style keyword.
.IP "\(bu" 4
keyword-expand-data
.Sp
This applies to style keywords that expand to a set of style keywords. Note:
there are currently no style keywords that have this behaviour.
.IP "\(bu" 4
keyword-valid-data
.Sp
This is a simple list of all valid keywords.
.SS "Role of keyword-table"
.IX Subsection "Role of keyword-table"
It is important to keep the four keyword tables synchronised. For example, if a
new keyword is defined its actions must be added to the 'keyword\-actions\-data'
table while the keyword itself must be added to the 'keyword\-valid\-data' table.
.PP
To make this task easier it makes sense to have a single master table defining
all this behaviour for the style keywords and then derive the four keyword data
tables from it. This script contains that master table and can output to stdout
constructors for each of the keyword data tables.
.SS "Master table structure"
.IX Subsection "Master table structure"
Here is an example definition of a style keyword in the master keyword data
table:
.PP
.Vb 10
\&    keyword_data = {
\&        Latex8pt = {
\&            description = \*(Aqset font size to 8 pt in latex output\*(Aq,
\&            expand_groups = {},
\&            conflict_groups = {\*(Aqdocumentclass\*(Aq, \*(Aqfont\-size\*(Aq},
\&            actions = {
\&                latex = {
\&                    metadata = {
\&                        documentclass = \*(Aqextarticle\*(Aq,
\&                        fontsize = \*(Aq8pt\*(Aq,
\&                    },
\&                },
\&            },
\&        },
\&        ...,
\&    }
.Ve
.PP
The style keyword in this example is 'Latex8pt'. These keywords must be unique:
this is enforced by lua since the style keywords are table keys and lua
requires table keys to be unique. The custom is to use CamelCase for style
keywords.
.PP
\fIdescription key\fR
.IX Subsection "description key"
.PP
This key defines the keyword description printed to stdout when the
\&\f(CW\*(C`\-\-list\-keywords\*(C'\fR option is used.
.PP
\fIexpand_groups key\fR
.IX Subsection "expand_groups key"
.PP
This key determines whether other style keywords expand into keyword sets that
include this keyword. For example, if 'OtherKeyword' expanded into a set of
keywords that included 'Latex8pt', then 'OtherKeyword' would be added to
\&'Latex8pt's sequence value for the 'expand_groups' key.
.PP
\fIconflict_groups key\fR
.IX Subsection "conflict_groups key"
.PP
This key lists any groups of style keywords that are mutually exclusive, i.e.,
that cannot be used together in the same markdown document. In the example
there are two such groups defined. The conflict groups are not defined in a
single place; rather, they are defined by adding the name of the conflict group
to the 'conflict_group' value for all the style keywords in the conflict group.
In the example the fact that one of the conflict group names is the same as a
metadata key is coincidental; it is not necessary for this to be the case.
.PP
\fIactions key\fR
.IX Subsection "actions key"
.PP
Style keyword actions are at the heart of keyword definition. They are also
what the \f(CW\*(C`pander\*(C'\fR script spends most of its time processing.
.PP
The primary key for actions are pandoc target format, e.g., html, latex, epub,
etc., with the additional pseudo-target 'all' applying to all formats.
.PP
Within each target format there are five types of actions that can be defined.
Only one such action type, 'metadata', is shown in the example. Here are the
details for each action type:
.nr y0 (\n[.l]/10)
.nr y1 (\n[y0])
.nr y2 (\n[y0]*8)
.TS
tab(@) expand;
rw(\n[y1]u) lw(\n[y2]u) .
T{
metadata
T}@T{
Table of "keyword = value" where the keyword and value are valid pandoc metadata settings, with exceptions as described below.
T}
@
@T{
A value can be a \fItoken\fR where a token has the value "::name::".
T}
@
@T{
The "metadata_token" function in the "pander" script has matching sets of processing instructions for each token name. It is a fatal error if there is no matching token name in that function.
T}
@
@T{
There is currently only one defined token: "cover_image" means the metadata value is to be replaced by a cover image file name. The cover image file has to be a png, jpg or gif file in the current directory with the same basename as the input markdown file. It is a fatal error if no image file is located.
T}
@
T{
extensions
T}@T{
Sequence of pandoc extension names.
T}
@
@T{
Prefix each extension name with "+" or "-" as per pandoc convention. If neither prefix is present the default is "+".
T}
@
T{
options
T}@T{
Table of "option = value".
T}
@
@T{
Use true value if the option is a flag. The option will be added to the pandoc command without a value.
T}
@
@T{
An option with a false value causes a fatal processing error.
T}
@
T{
filters
T}@T{
Sequence of (a) filter names or (b) sequences, the latter of which can have 1, 2 or 3 values as {filter_name, weighting, lua_type}.
T}
@
@T{
The "weighting" is an integer between 1 and 99 (default = 50).
T}
@
@T{
The "lua_type" is true if the filter is a lua filter and false if it is a non-lua filter (default = infer from presence or absence of a \fI.lua\fR extension).
T}
@
T{
post_run
T}@T{
Sequence of task names.
T}
@
@T{
These tasks are performed after pandoc document conversion has completed.
T}
@
@T{
The "post_process" function in the "pander" script has matching sets of instructions for each task keyword. It is a fatal error if there is no matching task in that function.
T}
@
@T{
The tasks currently defined are: "create_mobi" which uses "ebook-convert" to
generate a 'mobi' file from an 'epub' file, and "pause" which causes "pander"
to pause for the user to press the Enter key before exiting.
T}
.TE
.PP
Warning: if you set any key value to \fInil\fR the key will not be added to the
constructor that is output.
.PP
Note that the variable \f(CW\*(C`datadir\*(C'\fR is available to construct file paths. This
variable is set to the following in order of preference:
\&\fI\f(CI$XGD_DATA_HOME\fI/pandoc\fR if it exists,
\&\fI\f(CI$HOME\fI/.local/share/pandoc\fR if it exists,
or \fI\f(CI$HOME\fI/.pandoc\fR.
.PP
\fIAction precedence\fR
.IX Subsection "Action precedence"
.PP
The actions for the generic format 'all' are processed first and then any
format-specific actions are processed.
.PP
The 'extensions', 'filters' and 'post_run' values are all stored in sequences
and are simply added to those structures as the actions are processed.
.PP
The order of post_run tasks does not matter as they are executed by pander.
.PP
The extensions order is not significant since it does not matter to pandoc.
.PP
In pandoc the order in which filters are processed can matter, so filters
defined in style keywords appear in the pandoc command in weighting order with
smallest weighting value first and largest weighting value last. Filters with
the same weighting value occur in the pandoc command in the order they are
processed, i.e., by style keyword, then format, then sequence order within
format. Given this scheme, it can be seen that the situation where no
weightings are assigned to any filters is a special case: since filters with no
weighting value are assigned a weighting value of 50, all the filters will have
the same value and so will appear in the order they are processed.
.PP
Both 'metadata' and 'options' action data are stored in tables, i.e., with a
\&\f(CW\*(C`key=value\*(C'\fR structure.
.PP
The rules applying when multiple styles and/or target formats attempt to modify
the same metadata field or command line option can be complex. Here is a table
comparing what happens when adding a new value to an existing value in each
case. The new value may be a table (i.e., a sequence) or a non-table (i.e., a
string). The existing value may be nil, or it may be a table (i.e., a sequence)
or a non-table (i.e., a string) obtained from processing previous styles.
.TS
tab(:);
rb lb lb
rb l  l .
                     : New is string : New is sequence
     Existing is nil : assign string : assign sequence
  Existing is string : replace, WARN : ERROR
Existing is sequence : ERROR         : append sequence
.TE
.PP
From this arises the following processing logic:
.PP
.Vb 10
\&    if existing == nil then
\&        assign new string or sequence to it
\&        goto end of value processing
\&    end
\&    if existing == sequence then
\&        if new == sequence then
\&            append new items to existing ones
\&        else (new == string and existing == sequence)
\&            issue error
\&        end
\&        goto end of value processing
\&    end
\&    if new == sequence (and existing == string)
\&        issue error
\&    else (new == string (and existing == string)) then
\&        replace existing value
\&        issue warning
\&    end
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
lua (v5.3 or greater).
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Nebauer (david at nebauer dot org)
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2021 David Nebauer (david at nebauer dot org)
.PP
This file is part of Pander.
.PP
Pander is free software: you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
.PP
Pander is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with Pander.  If not, see <https://www.gnu.org/licenses/>
