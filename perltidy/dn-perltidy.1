.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DN-PERLTIDY 1"
.TH DN-PERLTIDY 1 "2017-03-27" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dn::PerlTidy \- perltidy with support for "method" keyword
.SH "USAGE"
.IX Header "USAGE"
.Vb 1
\&    dn\-perltidy perlfile
.Ve
.SH "REQUIRED ARGUMENTS"
.IX Header "REQUIRED ARGUMENTS"
.IP "\fIperlfile\fR" 4
.IX Item "perlfile"
Path (relative or absolute) to the file to analyse. Required.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h\fR  \fB\-\-help\fR" 4
.IX Item "-h --help"
Display help and exit.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Runs Perl::Tidy with additional support for the \f(CW\*(C`method\*(C'\fR keyword provided by
packages like Function::Parameters and Method::Signatures. Alters file in place
but first backs up the file ('bak' extension).
.SS "File checks"
.IX Subsection "File checks"
The module checks that the supplied file, to be tidied, is readable and has
perl mimetype \f(CW\*(C`application/x\-perl\*(C'\fR.
.SS "Perl::Tidy Options"
.IX Subsection "Perl::Tidy Options"
Perl::Tidy is called with the following options:
.RS 4
.IP "\-\-backup\-and\-modify\-in\-place (\-b)" 4
.IX Item "--backup-and-modify-in-place (-b)"
Current file moved to *.bak.
.IP "\-\-perl\-best\-practices (\-pbp)" 4
.IX Item "--perl-best-practices (-pbp)"
Will use conventions from Damian Conway's \fBPerl Best Practices\fR book.
.IP "\-\-nostandard\-output (\-nst)" 4
.IX Item "--nostandard-output (-nst)"
Is default, but required because \-pbp turns on \-st option. If \-st is set the
entire file is output to screen, whch is very ugly.
.IP "\-\-standard\-error\-output (\-se)" 4
.IX Item "--standard-error-output (-se)"
Causes output that would normally be sent to a .ERR file to instead be included
in stderr output.
.RE
.RS 4
.RE
.PP
Additional options can be set in a \fI.perltidyrc\fR configuration file.
.SS "Filters"
.IX Subsection "Filters"
Pre and post filters are applied to prevent problems with the keyword\ \f(CW\*(C`method\*(C'\fR provided by modules like Function::Parameters and
Method::Signatures.
.PP
The pre filter changes \f(CW\*(C`method\*(C'\fR to \f(CW\*(C`sub\*(C'\fR.
.PP
The post filter:
.RS 4
.IP "\(bu" 4
Turns \f(CW\*(C`sub\*(C'\fR keywords back to \f(CW\*(C`method\*(C'\fR
.IP "\(bu" 4
Adds empty parentheses where they are missing
.IP "\(bu" 4
Removes spaces inside the argument parentheses when there is only one argument
.IP "\(bu" 4
Ensures a space between the method name and argument parentheses.
.RE
.RS 4
.RE
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Cwd, File::MimeInfo::Magic, Function::Parameters, Getopt::Long::Descriptive,
List::Util, Moo, namespace::clean, Perl::Tidy, Readonly, strictures,
Test::File, Types::Standard, version.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
.SS "Suppress unnecessary output"
.IX Subsection "Suppress unnecessary output"
Test::File::file_readable_ok output test results to stdout. Neither IO::Null
nor Capture::Tiny were able to suppress this.
.SS "File mimetype"
.IX Subsection "File mimetype"
Part of the file check is confirming its mimetype is 'application/x\-perl'.
The file could be a perl module ('\s-1MODULE\s0.pm') or script ('\s-1SCRIPT\s0.pl'\ or\ '\s-1SCRIPT\s0'). Perl modules designed to detect mimetype are notoriously
inconsistent in detecting mimetype. Here are the test results obtained for
modules File::MimeInfo (v.\ 0.27), File::MimeInfo::Magic (v.\ 0.27),
File::MMagic (v.\ 1.30) and File::Type (v.\ 0.22) in determining the
mimetype of perl files:
.PP
.Vb 10
\&            |   SCRIPT.pl   |    SCRIPT     |  MODULE.pm
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& File::     | application/  | text/plain    | application/
\& MimeInfo   | x\-perl        |               | x\-perl
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& File::     | application/  | application/  | application/
\& MimeInfo:: | x\-perl        | x\-perl        | x\-perl
\& Magic      |               |               |
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& File::     | x\-system/     | x\-system/     | text/plain
\& MMagic     | x\-unix        | x\-unix        |
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& File::Type | application/  | application/  | application/
\&            | x\-perl        | x\-perl        | octet\-stream
.Ve
.PP
The only module that detects mimetype reliably in all three scenarios is
File::MimeInfo::Magic and that is what is currently used. Future versions of
these modules, however, may change their mimetype interpretation in these
scenarios.
.SS "No plan declared"
.IX Subsection "No plan declared"
Perl::Tidy is declaring this error at the end of each run:
.PP
.Vb 1
\&    # Tests were run but no plan was declared and done_testing() was not seen.
.Ve
.PP
I have not been able to determine the cause of this error, but as the same
problem occurs with Perl::Critic it is presumably due to some component common
to both modules.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Nebauer (david at nebauer dot org)
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2017 David Nebauer (david at nebauer dot org)
.PP
This script is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 229:" 4
.IX Item "Around line 229:"
You forgot a '=back' before '=head1'
