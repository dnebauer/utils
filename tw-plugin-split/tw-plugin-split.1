.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TW-PLUGIN-SPLIT 1"
.TH TW-PLUGIN-SPLIT 1 2024-04-13 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
tw\-plugin\-split \- convert single json or tid TiddlyWiki plugin file
.SH USAGE
.IX Header "USAGE"
\&\fBtw-plugin-split\fR [\fB\-s\fR] \fBplugin_file\fR
.PP
\&\fBtw-plugin-split \-h\fR
.SH "REQUIRED ARGUMENTS"
.IX Header "REQUIRED ARGUMENTS"
.IP \fBplugin_file\fR 4
.IX Item "plugin_file"
Path of the json plugin file to be converted.
.Sp
File path. Required.
.SH OPTIONS
.IX Header "OPTIONS"
.IP "\fB\-f\fR  \fB\-\-format\fR" 4
.IX Item "-f --format"
Plugin file format. Valid values are 'json' and 'tid'.
.Sp
Boolean. Optional. Defaults to \f(CW\*(C`json\*(C'\fR for files with a \fI.json\fR extension, or
\&\f(CW\*(C`tid\*(C'\fR for all other files.
.IP "\fB\-s\fR  \fB\-\-simplify\fR" 4
.IX Item "-s --simplify"
Whether to simplify the extracted plugin file names.
.Sp
Boolean. Optional. Default: false.
.IP \fB\-h\fR 4
.IX Item "-h"
Display help and exit.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This script converts a single \f(CW\*(C`tid\*(C'\fR or \f(CW\*(C`json\*(C'\fR plugin file for
TiddlyWiki <https://tiddlywiki.com/> into a group of files which can be used
with a node.js server installation of TiddlyWiki. Each plugin tiddler is output
into one or two files (depending on whether the metadata is contained in the
main tiddler file or split out into a \fImeta\fR file), and the plugin also has a
\&\fIplugin.info\fR file.
.PP
The main work of plugin extraction is done by the node.js version of tiddlywiki
which must be installed on the system. More specifically, the executable
\&\fItiddlywiki\fR must be available.
.PP
The plugin extraction command is:
.PP
.Vb 1
\&    tiddlywiki \-\-import PLUGIN_FILE DESERIALIZER \-\-savewikifolder ./
.Ve
.PP
where DESERIALIZER is \f(CW\*(C`application/x\-tiddler\*(C'\fR or \f(CW\*(C`application/json\*(C'\fR for
\&\f(CW\*(C`tid\*(C'\fR or \f(CW\*(C`json\*(C'\fR plugin files, respectively
.SS "Output file names"
.IX Subsection "Output file names"
All files are output to the current working directory.
.PP
Default tiddler file names are derived from tiddler title fields. Most plugin
authors use the title schema \fR\f(CI$:\fR\fI/plugins/AUTHOR/PLUGIN/name\fR, where AUTHOR is
the plugin author's handle and PLUGIN is the plugin's name. After conversion to
file names, this becomes \fI\fR\f(CI$_\fR\fI\|_plugin_AUTHOR_PLUGIN_name\fR. For example, the
files extracted from the plugin ContextSeach by danielo515 are:
    \f(CW$_\fR\|_plugins_danielo515_ContextPlugin_Caption.tid
    \f(CW$_\fR\|_plugins_danielo515_ContextPlugin_readme.tid
    \f(CW$_\fR\|_plugins_danielo515_ContextPlugin_Stylesheet_results.css
    \f(CW$_\fR\|_plugins_danielo515_ContextPlugin_Stylesheet_results.css.meta
    \f(CW$_\fR\|_plugins_danielo515_ContextPlugin_visualizer.tid
    \f(CW$_\fR\|_plugins_danielo515_ContextPlugin_widgets_context.js
    \f(CW$_\fR\|_plugins_danielo515_ContextPlugin_widgets_context.js.meta
    Context Search.tid
    plugin.info
.PP
If the \f(CW\*(C`\-s\*(C'\fR (\f(CW\*(C`\-\-simplify\*(C'\fR) option is used, plugin files of the form
\&\fR\f(CI$_\fR\fI\|_plugin_AUTHOR_PLUGIN_name\fR are changed to \fIname\fR. For the plugin above
the extracted files become:
    Caption.tid
    readme.tid
    Stylesheet_results.css
    Stylesheet_results.css.meta
    visualizer.tid
    widgets_context.js
    widgets_context.js.meta
    Context Search.tid
    plugin.info
.PP
In order for the file names to be simplified at least two of the extracted
files must begin with \fR\f(CI$_\fR\fI\|_plugins_\fR. The longest file stem shared by all files
beginning with \fI\fR\f(CI$_\fR\fI\|_plugins_\fR is then determined. This stem will be removed
from these file names unless doing so would:
.IP \(bu 4
Result in duplicate file names, or
.IP \(bu 4
Leave only a file extension remaining. (Actually, the test is just whether the
resulting file name begins with a period \- \f(CW\*(C`.\*(C'\fR.)
.SH CONFIGURATION
.IX Header "CONFIGURATION"
There are no configuration options for this script.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.IP "Cannot read file 'FILE'" 4
.IX Item "Cannot read file 'FILE'"
The specified file could not be read. This is usually because the wrong file
path is given, but could possibly occur if the file exists but the user does
not have permission to read it.
.IP "Expected 1 command line argument, got X" 4
.IX Item "Expected 1 command line argument, got X"
This occurs when too many command line arguments are provided. Be wary of using
wildcards which may inadvertently match more than one file.
.IP "Expected 1 plugin directory, got X: ..." 4
.IX Item "Expected 1 plugin directory, got X: ..."
If the extraction command is successful it should create a \fIplugins\fR
subdirectory which itself contains exactly one plugin-specific subdirectory. If
there are multiple plugin-specific subdirectories then something has gone wrong
with the plugin file extraction process.
.IP "Expected 1 plugin file format, got X" 4
.IX Item "Expected 1 plugin file format, got X"
This error occurs if more than one plugin file format is specified using the
\&\f(CW\*(C`\-f\*(C'\fR (\f(CW\*(C`\-\-format\*(C'\fR) option.
.IP "Invalid plugin file format '...'" 4
.IX Item "Invalid plugin file format '...'"
The only valid plugin file formats are "tid" and "json". Supplying any other
option to the \f(CW\*(C`\-f\*(C'\fR (\f(CW\*(C`\-\-format\*(C'\fR) option causes this error.
.IP "Missing executable 'tiddlywiki'" 4
.IX Item "Missing executable 'tiddlywiki'"
This script requires the node.js version of tiddlywiki which includes an
executable called \fItiddlywiki\fR.
.IP "Missing plugin file format '...'" 4
.IX Item "Missing plugin file format '...'"
This indicates an internal logic error while determining the plugin file format
and matching deserializer. It should not occur during normal operation.
.IP "No 'plugins' directory in extracted plugin" 4
.IX Item "No 'plugins' directory in extracted plugin"
If the extraction command is successful it should create a \fIplugins\fR
subdirectory which itself contains a plugin-specific subdirectory. If the
\&\fIplugins\fR subdirectory is not present then something has gone wrong with the
plugin file extraction process.
.IP "No file name provided" 4
.IX Item "No file name provided"
This occurs when no file name is provided on the command line.
.IP "No plugin directories in extracted content" 4
.IX Item "No plugin directories in extracted content"
If the extraction command is successful it should create a \fIplugins\fR
subdirectory which itself contains a plugin-specific subdirectory. If the
plugin-specific subdirectory is missing then something has gone wrong with the
plugin file extraction process.
.IP "No plugin files extracted" 4
.IX Item "No plugin files extracted"
If the extraction command is successful it should create a \fIplugins\fR
subdirectory which itself contains a plugin-specific subdirectory. The
plugin-specific subdirectory should contains one or more plugin files \- if it
does not then something has gone wrong with the plugin file extraction process.
.IP "Output directory must be empty" 4
.IX Item "Output directory must be empty"
This script will abort if the current directory contains any files or
directories.
.IP "Plugin extraction command failed" 4
.IX Item "Plugin extraction command failed"
If this command fails, the above error message is displayed along with the
system error message that was generated.
.IP "Stem = STEM, files = FILES at ..." 4
.IX Item "Stem = STEM, files = FILES at ..."
This is a debugging error message that indicates something thought to be
impossible has occurred while analysing the extracted file names. Please report
the full content of this error to the script's author.
.IP "Unable to copy 'FROM' to 'CWD': ERROR" 4
.IX Item "Unable to copy 'FROM' to 'CWD': ERROR"
This error occurs if the operating system is unable to copy the extracted
plugin files from their temporary directory to the current directory. The error
message includes any error message generated by the operating system.
.IP "Unable to rename FROM to TO: ERROR" 4
.IX Item "Unable to rename FROM to TO: ERROR"
This error occurs if the operating system is unable to rename the extracted
plugin files in their temporary directory. The error message includes any error
message generated by the operating system.
.IP "Unable to write 'FILE'" 4
.IX Item "Unable to write 'FILE'"
This occurs when the file system is unable to write to the current directory.
.IP "Unable to write to console" 4
.IX Item "Unable to write to console"
The script has tried to write a warning or error message to the console but was
unable to do so.
.SH DEPENDENCIES
.IX Header "DEPENDENCIES"
.SS "Perl modules"
.IX Subsection "Perl modules"
Carp, Const::Fast, English, File::Basename, File::Copy, File::Find::Rule,
File::Spec, File::Which, IPC::Cmd, List::SomeUtils, Moo, MooX::HandlesVia,
MooX::Options, namespace::clean, Path::Tiny;, strictures, Types::Path::Tiny,
Types::Standard, version.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
Exits with a success value (shell 0) if it extracts and writes all output files
successfully. If any error prevents this successful conclusion, the script
exits with an error code (shell 1), unless the failure is caused by an
underlying operating system error, in which case the shell error code is
returned.
.SH INCOMPATIBILITIES
.IX Header "INCOMPATIBILITIES"
None known.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs to the author.
.SH AUTHOR
.IX Header "AUTHOR"
David Nebauer (david at nebauer dot org)
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2019 David Nebauer (david at nebauer dot org)
.PP
This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
