#!/usr/bin/perl

use Moo;
use strictures 2;
use 5.008;
use 5.038_001;
use version; our $VERSION = qv('0.10.0');
use namespace::clean;
use App::Dn::BuildModule;

App::Dn::BuildModule->new_with_options->run;

1;

# POD    {{{1

__END__

=head1 NAME

dn-build-perl-mod-deb - build debian package

=head1 USAGE

B<dn-build-perl-mod-deb> [B<-e> I<email>] [B<-x>] [B<-d>] [B<-n>]

B<dn-build-perl-mod-deb -h>

=head1 REQUIRED ARGUMENTS

Nil.

=head1 OPTIONS

=over

=item B<-e>  B<--email> I<email>

Debian package maintainer email. Default = C<david@nebauer.org>

=item B<-d>  B<--no_builddeps>

C<debuild> default behaviour is to run S<< C<dpkg-checkbuilddeps> >> to check
build dependencies and conflicts. Sometimes this check will declare that a
locally installed module is an unmet dependency even if a suitable version of
it is correctly installed.

This option runs C<debuild> with its C<-d> option, which prevents it running
S<< C<dpkg-checkbuilddeps> >>. This solves the immediate problem of the failed
dependency check, but be aware it may obscure other build problems.

=item B<-n>  B<--no_install>

Suppress installation of debian package after it is built. Default = FALSE

=item B<-h>

Display help and exit.

=back

=head1 DESCRIPTION

=head2 Preparation

This script assumes the following directory structure:

    |
    `-- project-directory
        |-- build
        `-- source
            `-- required

The modules's source files and subdirectories are in the F<source> directory.
In addition to the module files the F<source> directory has an additional
subdirectory: F<required>.

This script assumes the following build process has been followed at least
once:

=over

=item

Install module source in the F<source> directory. This may invove a command
sequence like:

    $ cd path/to/project-directory/source

    $ cpan -g The::Module
    Checking The::Module
    CPAN: Storable loaded ok (v2.49_01)
    Reading '/home/david/.cpan/Metadata'
      Database was generated on Sat, 09 May 2015 12:29:02 GMT

    $ dir
    TheModule-1.23.tar.gz

    $ tar zxvf TheModule-1.23.tar.gz
    TheModule-1.23/
    TheModule-1.23/META.yml
    ...

    $ mv TheModule-1.23/* ./

    $ rmdir TheModule-1.23

    $ rm TheModule-1.23.tar.gz

=item

Create F<required> subdirectory:

    $ cd path/to/source
    $ mkdir required

=item

Add executable scripts

Scripts to be installed to S<< F</usr/bin/> >> are put in
S<< F<source/script> >>. This directory needs to be created. The scripts are
not set as executable in this directory; that is handled during packaging.

=item

Add bash completion script

S<< C<dn-build-perl-mod-deb> >> provides support for a single bash completion
file. The file must be called S<< F<PACKAGE.bash-completion> >> where 'PACKAGE'
is the name of the debian package to be created. For example, the perl module
S<< F<My::Module> >> may be packaged as S<< F<libmy-module-perl> >>. If
executable scripts are included in the package, the accompanying bash
completion file in the source tree would be
S<< F<source/required/libmy-module-perl.bash-completion> >>, and would install
to S<< F</usr/share/bash-completion/completions/libmy-module-perl> >>.

=item

Add files for installation to other directories

There is a mechanism for installing files to any system location. The files
must be installed under the F<source> directory in any subdirectory path. It is
a convention to install files under S<< F<source/contrib> >>. For example, a
zsh completion script may be located at S<<
F<source/contrib/completion/zsh/_my-script> >> in the source tree. The install
destination is specified in S<< F<source/required/PACKAGE.install> >> where
PACKAGE is the debian package name. Each file to be installed must be listed in
this file with a destination directory. Here is the line that might be used for
the zsh completion file mentioned above:

    contrib/completion/zsh/_my-script /usr/share/zsh/vendor-completions

The location of the source file, relative to the F<source> directory, is given
first, followed by the destination directory. Note that the destination does
not include the file name as it uses the name of the source file.

=item

Copy all source files to F<build> directory:

    $ cd ../build
    $ cp -r ../source/. ./

Note the use of S<< C<../source/.> >> rather than the more usual S<<
C<../source/*> >>. This ensures hidden files and directories are copied as
well. This is important in some cases where failure to copy hidden files
results in S<< C<milla test> >> and S<< C<milla build> >> failing because it
cannot find the distribution.

=item

Build distribution file. Supported build methods are:

=over

=item

Dist::Milla (relies on detecting a S<< F<dist.ini> >> file in the project root
directory)

    $ prove -l t
    $ milla test
    $ milla build

=item

ExtUtils::MakeMaker (relies on detecting a S<< F<Makefile.PL> >> file in the
project root directory)

    $ perl Makefile.PL
    $ make test
    $ make dist

=item

Module::Build (relies on detecting a S<< F<Build.PL> >> file in the root
directory)

    $ perl Build.PL
    $ ./Build
    $ ./Build test
    $ ./Build dist

=item

Extract the distribution file, creating a subdirectory containing a copy of the
distribution files:

    $ tar zxvf TheModule-1.23.tar.gz

Note: the Dist::Milla build process results in the creation of a subdirectory
of this name being built, so that subdirectory must be deleted before
S<< C<tar zxvf> >> is run.

=item

Create debian package build files using S<< C<dh-make-perl> >>:

    $ dh-make-perl TheModule-1.23

This command may fail if module dependencies are not met. Install any required
modules before proceeding.

=item

Perform initial build of debian package using C<debuild>:

    $ cd TheModule-1.23
    $ debuild

Note that this operation is performed from the module directory.

=item

The initial buld operation will generate a number of lintian warnings. These
require changes to the F<control>, F<copyright> and F<changelog> files in the
debian subdirectory. These are copied to the F<build> directory's F<required>
subdirectory:

    $ for x in control copyright changelog ; do \
      cp debian/${x} ../required/ ; done

or use C<mc> to copy them manually:

    $ mc debian/ ../required/

These files are then edited to remove the warnings.

The commonest warnings are fixed with the following:

=over

=item

The last two lines of the F<control> file are autogenerated content and need to
be removed

=item

The F<copyright> file contains an autogenerated disclaimer, usually beginning
around line 5, that needs to be removed.

=item

The F<changelog> file needs the details of the initial change altered to
something like:

    * Local package
    * Initial release
    * Closes: 2001

=back

Of course, make any additional alterations to these files to fix additional
lintian warnings and to ensure they are correct and complete.

When these files have been fixed, copy them back to the debian subdirectory:

    cp ../required/* debian/

Also copy them to the S<< F<source/required> >> subdirectory so they are
included in the next build sequence.

=item

Repeat the previous step until no lintian warnings appear during the package
build.

=back

=back

=head2 Use of this script

Once the initial build has been performed, this script is run from the
F<source> directory. It performs the following tasks:

=over

=item

Copies the directory contents to sibling directory F<build>

=item

Builds a distribution

=item

Extracts the distribution into its subdirectory

=item

Runs S<< C<dh-make-perl> >> on the extracted module source

=item

Changes to the extracted module directory and runs C<debuild>

=item

Copies all files in the S<< F<build/required> >> directory to the module's
F<debian> directory

=item

Installs the created package.

=back

=head1 DIAGNOSTICS

=head2 No Makefile.PL, Build.PL or dist.ini found

Occurs if script cannot find evidence of a supported build system.

=head2 Cannot locate source directory 'DIR'

=head2 Cannot locate build directory 'DIR'

=head2 Copy of source to build directory failed with error: ERROR

These errors occur when the script is unable to recursively copy the contents
of the F<source> directory to the F<build> directory.

=head2 Cannot locate changelog 'PATH'

Occurs when the script is unable to locate the F<changelog> file in the
F<debian> subdirectory of the source distribution base directory.

=head2 Unable to open FILE: ERROR

=head2 Unable to close FILE: ERROR

These errors occur when the script is unable to open or close a disk file. The
files this script attempts to access in this way are the F<changelog> and
F<rules> debian control files.

=head2 No file provided

=head2 Unable to extract module name and version from distribution file

=head2 Multiple distribution files detected ...

Occurs when the script attempts to locate a source distribution file after the
initial build process. It indicate that no file matching the supported build
processes was found, or that multiple matching files were found.

=head2 Cannot construct module debian directory pathname

=head2 Cannot construct module directory pathname

Occurs when the script is unable to derive the name of the extracted source
distribution base directory.

=head2 Unable to extract package name

Occurs when the script is unable to extract the package name from the
F<changelog> debian control file.

=head2 Cannot find rules file

Occurs when the script is unable to locate the F<rules> debian control file.

=head2 Unable to write to FILE: ERROR

Occurs if the script is unable to write to a disk file. This can occur with the
F<rules> debian control file.

=head2 Copy of required debian files failed

Occurs when attempting to copy required debian control files from
F<build/required/> to F<build/DIST_SOURCE_BASE/debian>.

=head2 Unable to find built deb file

=head2 Multiple distribution files detected: ...

These errors occur when attempting to locate the debian package file built by
the script.

=head1 DEPENDENCIES

These dependencies include those of subsidiary module App::Dn::BuildModule.

=head2 Perl modules

App::Dn::BuildModule, App::Dn::BuildModule::Constants,
App::Dn::BuildModule::DistroArchive, App::Dn::BuildModule::DistroFile, Carp,
Const::Fast, English, File::Basename, File::chdir, File::Copy::Recursive,
File::DirSync, Git::Wrapper, Moo, MooX::HandlesVia, MooX::Options,
namespace::clean, Path::Tiny, Role::Utils::Dn, strictures, Types::Dn,
Types::Path::Tiny, Types::Standard, version.

=head2 Executables

debuild, dh-make-perl, make, milla, prove, tar.

=head2 Debian packaging

The executable 'milla' is part of the Dist::Milla perl module, but that module
is not available from standard debian repositories.

=head1 CONFIGURATION

There is no script configuration.

=head1 EXIT STATUS

Exits with zero if successful or one if not.

=head1 INCOMPATIBILITIES

There are no known incompatibilities.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head1 AUTHOR

David Nebauer E<lt>david@nebauer.orgE<gt>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2015 David Nebauer E<lt>david@nebauer.orgE<gt>

This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut

# vim:fdm=marker
