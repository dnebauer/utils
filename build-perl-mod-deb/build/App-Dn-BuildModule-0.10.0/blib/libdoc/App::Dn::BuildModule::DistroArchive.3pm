.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::Dn::BuildModule::DistroArchive 3pm"
.TH App::Dn::BuildModule::DistroArchive 3pm 2024-05-14 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
App::Dn::BuildModule::DistroArchive \- utility module for App::Dn::BuildModule
.SH VERSION
.IX Header "VERSION"
This documentation refers to App::Dn::BuildModule::DistroArchive version 0.10.0.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 9
\&    use App::Dn::BuildModule::Constants;
\&    my $targz = App::Dn::BuildModule::DistroArchive\->new(
\&      match             => qr/[.]tar[.]gz\ez/xsm,
\&      ext_snips         => 2,
\&      extract_cmd_parts => [
\&        \*(Aqtar\*(Aq,
\&        \*(Aqzxvf\*(Aq,
\&        $App::Dn::BuildModule::Constants::FILE_TOKEN ],
\&    );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is a utility module used by App::Dn::BuildModule. It models the
behaviour of a particular format for a perl distribution archive, for example,
a \fItar.gz\fR distribution archive.
.PP
For each archive format this module provides:
.IP "a regular expression that matches the archive file name" 4
.IX Item "a regular expression that matches the archive file name"
.PD 0
.IP "the number of elements in the suffix" 4
.IX Item "the number of elements in the suffix"
.IP "a shell command to extract the archive." 4
.IX Item "a shell command to extract the archive."
.PD
.SH SUBROUTINES/METHODS
.IX Header "SUBROUTINES/METHODS"
.SS extract_cmd($file)
.IX Subsection "extract_cmd($file)"
\fIPurpose\fR
.IX Subsection "Purpose"
.PP
Provide a shell command that will extract an specific archive in place.
.PP
More specifically, it takes the command elements from the module attribute
\&\f(CW\*(C`extract_cmd_parts\*(C'\fR, replaces any elements matching \f(CW$FILE_TOKEN\fR with the
provided file name, and returns the command elements.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.ie n .IP $file 4
.el .IP \f(CW$file\fR 4
.IX Item "$file"
Name of archive file. Scalar. Required.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Nil.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
List of command elements.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
.SS Properties
.IX Subsection "Properties"
\fImatch\fR
.IX Subsection "match"
.PP
A regular expression that matches the archive file name.
It usually matches on a distinctive suffix and is expressed as a
regular expression (regex).
.PP
For example, the regular expression for targz (\fItar.gz\fR) archives is
\&\f(CW\*(C`qr/[.]tar[.]gz\ez/xsm\*(C'\fR.
.PP
Scalar regex. Required.
.PP
\fIext_snips\fR
.IX Subsection "ext_snips"
.PP
Number of elements in the file name suffix.
This value is useful for snipping the suffix elements off filenames.
.PP
For example, for targz (\fItar.gz\fR) archives the number is 2.
.PP
Scalar integer. Required.
.PP
\fIextract_cmd_parts\fR
.IX Subsection "extract_cmd_parts"
.PP
A shell command to extract the archive contents in place.
The command is broken into words.
One of those words must be \f(CW$FILE_TOKEN\fR, which represents the
archive file name.
.PP
For example, with \f(CW$FILE_TOKEN\fR set to \fI::FILE::\fR, for targz (\fItar.gz\fR)
archives the value would be \f(CW\*(C`[\ \*(Aqtar\*(Aq,\ \*(Aqzxvf\*(Aq,\ \*(Aq::FILE::\*(Aq\ ]\*(C'\fR.
.SS "Configuration files"
.IX Subsection "Configuration files"
None used.
.SS "Environment variables"
.IX Subsection "Environment variables"
None used.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
This module emits no custom warning or error messages.
.SH INCOMPATIBILITIES
.IX Header "INCOMPATIBILITIES"
None known.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
None reported.
.SH DEPENDENCIES
.IX Header "DEPENDENCIES"
Const::Fast, Moo, strictures, Types::Standard, version.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Copyright 2024, David Nebauer
.SH AUTHOR
.IX Header "AUTHOR"
David Nebauer <david@nebauer.org>
