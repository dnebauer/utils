.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DN-BUILD-PERL-MOD-DEB 1"
.TH DN-BUILD-PERL-MOD-DEB 1 2024-01-30 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
dn\-build\-perl\-mod\-deb \- build debian package
.SH USAGE
.IX Header "USAGE"
\&\fBdn-build-perl-mod-deb\fR [\fB\-e\fR \fIemail\fR] [\fB\-x\fR] [\fB\-d\fR] [\fB\-n\fR]
.PP
\&\fBdn-build-perl-mod-deb \-h\fR
.SH "REQUIRED ARGUMENTS"
.IX Header "REQUIRED ARGUMENTS"
Nil.
.SH OPTIONS
.IX Header "OPTIONS"
.IP "\fB\-e\fR  \fB\-\-email\fR \fIemail\fR" 4
.IX Item "-e --email email"
Debian package maintainer email. Default = \f(CW\*(C`david@nebauer.org\*(C'\fR
.IP "\fB\-d\fR  \fB\-\-no_builddeps\fR" 4
.IX Item "-d --no_builddeps"
\&\f(CW\*(C`debuild\*(C'\fR default behaviour is to run \f(CW\*(C`dpkg\-checkbuilddeps\*(C'\fR to check
build dependencies and conflicts. Sometimes this check will declare that a
locally installed module is an unmet dependency even if a suitable version of
it is correctly installed.
.Sp
This option runs \f(CW\*(C`debuild\*(C'\fR with its \f(CW\*(C`\-d\*(C'\fR option, which prevents it running
\&\f(CW\*(C`dpkg\-checkbuilddeps\*(C'\fR. This solves the immediate problem of the failed
dependency check, but be aware it may obscure other build problems.
.IP "\fB\-n\fR  \fB\-\-no_install\fR" 4
.IX Item "-n --no_install"
Suppress installation of debian package after it is built. Default = FALSE
.IP \fB\-h\fR 4
.IX Item "-h"
Display help and exit.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.SS Preparation
.IX Subsection "Preparation"
This script assumes the following directory structure:
.PP
.Vb 5
\&    |
\&    \`\-\- project\-directory
\&     \ \  |\-\- build
\&        \`\-\- source
\&            \`\-\- required
.Ve
.PP
The modules's source files and subdirectories are in the \fIsource\fR directory.
In addition to the module files the \fIsource\fR directory has an additional
subdirectory: \fIrequired\fR.
.PP
This script assumes the following build process has been followed at least
once:
.IP \(bu 4
Install module source in the \fIsource\fR directory. This may invove a command
sequence like:
.Sp
.Vb 1
\&    $ cd path/to/project\-directory/source
\&
\&    $ cpan \-g The::Module
\&    Checking The::Module
\&    CPAN: Storable loaded ok (v2.49_01)
\&    Reading \*(Aq/home/david/.cpan/Metadata\*(Aq
\&      Database was generated on Sat, 09 May 2015 12:29:02 GMT
\&
\&    $ dir
\&    TheModule\-1.23.tar.gz
\&
\&    $ tar zxvf TheModule\-1.23.tar.gz
\&    TheModule\-1.23/
\&    TheModule\-1.23/META.yml
\&    ...
\&
\&    $ mv TheModule\-1.23/* ./
\&
\&    $ rmdir TheModule\-1.23
\&
\&    $ rm TheModule\-1.23.tar.gz
.Ve
.IP \(bu 4
Create \fIrequired\fR subdirectory:
.Sp
.Vb 2
\&    $ cd path/to/source
\&    $ mkdir required
.Ve
.IP \(bu 4
Add executable scripts
.Sp
Scripts to be installed to \fI/usr/bin/\fR are put in
\&\fIsource/script\fR. This directory needs to be created. The scripts are
not set as executable in this directory; that is handled during packaging.
.IP \(bu 4
Add bash completion script
.Sp
\&\f(CW\*(C`dn\-build\-perl\-mod\-deb\*(C'\fR provides support for a single bash completion
file. The file must be called \fIPACKAGE.bash\-completion\fR where 'PACKAGE'
is the name of the debian package to be created. For example, the perl module
\&\fIMy::Module\fR may be packaged as \fIlibmy-module-perl\fR. If
executable scripts are included in the package, the accompanying bash
completion file in the source tree would be
\&\fIsource/required/libmy\-module\-perl.bash\-completion\fR, and would install
to \fI/usr/share/bash\-completion/completions/libmy\-module\-perl\fR.
.IP \(bu 4
Add files for installation to other directories
.Sp
There is a mechanism for installing files to any system location. The files
must be installed under the \fIsource\fR directory in any subdirectory path. It is
a convention to install files under \fIsource/contrib\fR. For example, a
zsh completion script may be located at \fIsource/contrib/completion/zsh/_my\-script\fR in the source tree. The install
destination is specified in \fIsource/required/PACKAGE.install\fR where
PACKAGE is the debian package name. Each file to be installed must be listed in
this file with a destination directory. Here is the line that might be used for
the zsh completion file mentioned above:
.Sp
.Vb 1
\&    contrib/completion/zsh/_my\-script /usr/share/zsh/vendor\-completions
.Ve
.Sp
The location of the source file, relative to the \fIsource\fR directory, is given
first, followed by the destination directory. Note that the destination does
not include the file name as it uses the name of the source file.
.IP \(bu 4
Copy all source files to \fIbuild\fR directory:
.Sp
.Vb 2
\&    $ cd ../build
\&    $ cp \-r ../source/. ./
.Ve
.Sp
Note the use of \f(CW\*(C`../source/.\*(C'\fR rather than the more usual \f(CW\*(C`../source/*\*(C'\fR. This ensures hidden files and directories are copied as
well. This is important in some cases where failure to copy hidden files
results in \f(CW\*(C`milla\ test\*(C'\fR and \f(CW\*(C`milla\ build\*(C'\fR failing because it
cannot find the distribution.
.IP \(bu 4
Build distribution file. Supported build methods are:
.RS 4
.IP \(bu 4
Dist::Milla (relies on detecting a \fIdist.ini\fR file in the project root
directory)
.Sp
.Vb 3
\&    $ prove \-l t
\&    $ milla test
\&    $ milla build
.Ve
.IP \(bu 4
ExtUtils::MakeMaker (relies on detecting a \fIMakefile.PL\fR file in the
project root directory)
.Sp
.Vb 3
\&    $ perl Makefile.PL
\&    $ make test
\&    $ make dist
.Ve
.IP \(bu 4
Module::Build (relies on detecting a \fIBuild.PL\fR file in the root
directory)
.Sp
.Vb 4
\&    $ perl Build.PL
\&    $ ./Build
\&    $ ./Build test
\&    $ ./Build dist
.Ve
.IP \(bu 4
Extract the distribution file, creating a subdirectory containing a copy of the
distribution files:
.Sp
.Vb 1
\&    $ tar zxvf TheModule\-1.23.tar.gz
.Ve
.Sp
Note: the Dist::Milla build process results in the creation of a subdirectory
of this name being built, so that subdirectory must be deleted before
\&\f(CW\*(C`tar\ zxvf\*(C'\fR is run.
.IP \(bu 4
Create debian package build files using \f(CW\*(C`dh\-make\-perl\*(C'\fR:
.Sp
.Vb 1
\&    $ dh\-make\-perl TheModule\-1.23
.Ve
.Sp
This command may fail if module dependencies are not met. Install any required
modules before proceeding.
.IP \(bu 4
Perform initial build of debian package using \f(CW\*(C`debuild\*(C'\fR:
.Sp
.Vb 2
\&    $ cd TheModule\-1.23
\&    $ debuild
.Ve
.Sp
Note that this operation is performed from the module directory.
.IP \(bu 4
The initial buld operation will generate a number of lintian warnings. These
require changes to the \fIcontrol\fR, \fIcopyright\fR and \fIchangelog\fR files in the
debian subdirectory. These are copied to the \fIbuild\fR directory's \fIrequired\fR
subdirectory:
.Sp
.Vb 2
\&    $ for x in control copyright changelog ; do \e
\&      cp debian/${x} ../required/ ; done
.Ve
.Sp
or use \f(CW\*(C`mc\*(C'\fR to copy them manually:
.Sp
.Vb 1
\&    $ mc debian/ ../required/
.Ve
.Sp
These files are then edited to remove the warnings.
.Sp
The commonest warnings are fixed with the following:
.RS 4
.IP \(bu 4
The last two lines of the \fIcontrol\fR file are autogenerated content and need to
be removed
.IP \(bu 4
The \fIcopyright\fR file contains an autogenerated disclaimer, usually beginning
around line 5, that needs to be removed.
.IP \(bu 4
The \fIchangelog\fR file needs the details of the initial change altered to
something like:
.Sp
.Vb 3
\&    * Local package
\&    * Initial release
\&    * Closes: 2001
.Ve
.RE
.RS 4
.Sp
Of course, make any additional alterations to these files to fix additional
lintian warnings and to ensure they are correct and complete.
.Sp
When these files have been fixed, copy them back to the debian subdirectory:
.Sp
.Vb 1
\&    cp ../required/* debian/
.Ve
.Sp
Also copy them to the \fIsource/required\fR subdirectory so they are
included in the next build sequence.
.RE
.IP \(bu 4
Repeat the previous step until no lintian warnings appear during the package
build.
.RE
.RS 4
.RE
.SS "Use of this script"
.IX Subsection "Use of this script"
Once the initial build has been performed, this script is run from the
\&\fIsource\fR directory. It performs the following tasks:
.IP \(bu 4
Copies the directory contents to sibling directory \fIbuild\fR
.IP \(bu 4
Builds a distribution
.IP \(bu 4
Extracts the distribution into its subdirectory
.IP \(bu 4
Runs \f(CW\*(C`dh\-make\-perl\*(C'\fR on the extracted module source
.IP \(bu 4
Changes to the extracted module directory and runs \f(CW\*(C`debuild\*(C'\fR
.IP \(bu 4
Copies all files in the \fIbuild/required\fR directory to the module's
\&\fIdebian\fR directory
.IP \(bu 4
Installs the created package.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.SS "No Makefile.PL, Build.PL or dist.ini found"
.IX Subsection "No Makefile.PL, Build.PL or dist.ini found"
Occurs if script cannot find evidence of a supported build system.
.SS "Cannot locate source directory 'DIR'"
.IX Subsection "Cannot locate source directory 'DIR'"
.SS "Cannot locate build directory 'DIR'"
.IX Subsection "Cannot locate build directory 'DIR'"
.SS "Copy of source to build directory failed with error: ERROR"
.IX Subsection "Copy of source to build directory failed with error: ERROR"
These errors occur when the script is unable to recursively copy the contents
of the \fIsource\fR directory to the \fIbuild\fR directory.
.SS "Cannot locate changelog 'PATH'"
.IX Subsection "Cannot locate changelog 'PATH'"
Occurs when the script is unable to locate the \fIchangelog\fR file in the
\&\fIdebian\fR subdirectory of the source distribution base directory.
.SS "Unable to open FILE: ERROR"
.IX Subsection "Unable to open FILE: ERROR"
.SS "Unable to close FILE: ERROR"
.IX Subsection "Unable to close FILE: ERROR"
These errors occur when the script is unable to open or close a disk file. The
files this script attempts to access in this way are the \fIchangelog\fR and
\&\fIrules\fR debian control files.
.SS "No file provided"
.IX Subsection "No file provided"
.SS "Unable to extract module name and version from distribution file"
.IX Subsection "Unable to extract module name and version from distribution file"
.SS "Multiple distribution files detected ..."
.IX Subsection "Multiple distribution files detected ..."
Occurs when the script attempts to locate a source distribution file after the
initial build process. It indicate that no file matching the supported build
processes was found, or that multiple matching files were found.
.SS "Cannot construct module debian directory pathname"
.IX Subsection "Cannot construct module debian directory pathname"
.SS "Cannot construct module directory pathname"
.IX Subsection "Cannot construct module directory pathname"
Occurs when the script is unable to derive the name of the extracted source
distribution base directory.
.SS "Unable to extract package name"
.IX Subsection "Unable to extract package name"
Occurs when the script is unable to extract the package name from the
\&\fIchangelog\fR debian control file.
.SS "Cannot find rules file"
.IX Subsection "Cannot find rules file"
Occurs when the script is unable to locate the \fIrules\fR debian control file.
.SS "Unable to write to FILE: ERROR"
.IX Subsection "Unable to write to FILE: ERROR"
Occurs if the script is unable to write to a disk file. This can occur with the
\&\fIrules\fR debian control file.
.SS "Copy of required debian files failed"
.IX Subsection "Copy of required debian files failed"
Occurs when attempting to copy required debian control files from
\&\fIbuild/required/\fR to \fIbuild/DIST_SOURCE_BASE/debian\fR.
.SS "Unable to find built deb file"
.IX Subsection "Unable to find built deb file"
.SS "Multiple distribution files detected: ..."
.IX Subsection "Multiple distribution files detected: ..."
These errors occur when attempting to locate the debian package file built by
the script.
.SH DEPENDENCIES
.IX Header "DEPENDENCIES"
.SS "Perl modules"
.IX Subsection "Perl modules"
Carp, Const::Fast, English, experimental, File::Basename, File::chdir,
File::Copy::Recursive, File::DirSync, Function::Parameters, Git::Wrapper, Moo,
MooX::HandlesVia, MooX::Options, namespace::clean, Path::Tiny, Role::Utils::Dn,
strictures, Types::Dn, Types::Path::Tiny, Types::Standard, version.
.SS Executables
.IX Subsection "Executables"
debuild, dh-make-perl, make, milla, prove, tar.
.SS "Debian packaging"
.IX Subsection "Debian packaging"
The executable 'milla' is part of the Dist::Milla perl module, but that module
is not available from standard debian repositories.
.SH CONFIGURATION
.IX Header "CONFIGURATION"
There is no script configuration.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
Exits with zero if successful or one if not.
.SH INCOMPATIBILITIES
.IX Header "INCOMPATIBILITIES"
There are no known incompatibilities.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs to the author.
.SH AUTHOR
.IX Header "AUTHOR"
David Nebauer <davidnebauer@hotkey.net.au>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2015 David Nebauer <davidnebauer@hotkey.net.au>
.PP
This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
