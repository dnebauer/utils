#!/bin/bash

# File: dn-colour-bash
# Author: David Nebauer
# Purpose: Display foreground and background bash colour codes
# Created: 2009-04-19 created
# Credit: Daniel Crisman (BASH Prompt HOWTO
#         <http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html>)

# VARIABLES

self="$( basename ${0} )"
usage="Usage:"
# test text
txt='gW'
# y-axis legend
declare -a y_legend=( ' ' " " 'F' " " 'O' " " 'R' " " 'E' " " 'G' " " \
                      'R' " " 'O' " " 'U' " " 'N' " " 'D' " " ' ' " " ' ' )
# label for default formatting code must be four characters long
default_label=' Def'
# counter for displaying y-axis legend
count=0
args=""


# PROCEDURES

# Show usage
#   params: nil
#   prints: nil
#   return: nil
displayUsage () {
	echo "${self}: display foreground and background bash colour codes"
	echo
	echo "Displays foreground and background bash colour codes in a"
	echo "matrix that also shows the appearance of all colour combinations."
	echo 
	echo -e "${usage} ${self} ${parameters}"
	echo "       ${self} -h"
	echo 
	echo "To use colour effects in bash, use commands of the form:"
	echo "  echo -e \"\\033[<FG>mSome text\\033[m\""
	echo "and"
	echo "  echo -e \"\\033[<FG>;<BG>mSome text\\033[m\""
	echo "where '<FG>' and '<BG>' are, respectively, foreground"
	echo "and background colour codes."
}
# Process command line
#   params: all command line parameters
#   prints: feedback
#   return: nil
processCommandLine () {
	# Read the command line options
	#   - if optstring starts with ':' then error reporting is suppressed
	#     leave ':' at start as '\?' and '\:' error capturing require it
	#   - if option is followed by ':' then it is expected to have an argument
	while getopts ":h" opt ; do
		case ${opt} in
			'h' ) displayUsage && exit 0;;
			\?  ) echo -e "Error: Invalid flag '${OPTARG}' detected"
				  echo -e "Usage: ${self} ${parameters}"
				  echo -e "Try '${self} -h' for help"
				  echo -ne "\a"
				  exit 1;;
			\:  ) echo -e "Error: No argument supplied for flag '${OPTARG}'"
				  echo -e "Usage: ${self} ${parameters}"
				  echo -e "Try '${self} -h' for help"
				  echo -ne "\a"
				  exit 1;;
		esac
	done
	shift $(( ${OPTIND} - 1 ))
	args="${@}"  # reset arguments
	unset usage parameters
}


# MAIN

# Process command line
processCommandLine "${@}"
while [ "${*}" != "${args}" ] ; do shift ; done
unset args

# X-axis legend (background colours)
echo -en "\n\033[1m                    "
echo -e  "B   A   C   K   G   R   O   U   N   D\033[m"
echo -en "          "
echo -e  "${default_label}  40   41   42   43   44   45   46   47   49   00"

# Display rows
# note that fgs variable does double duty as y-axis label and as
# foreground colour code -- because first value ('Def. for default)
# is not a valid code it must be intercepted and changed to valid
# colour code
for fgs in "${default_label}"                               \
	       '   1' '   4' '   5' '   7' '   8' '  30' '1;30' \
		   '  31' '1;31' '  32' '1;32' '  33' '1;33' '  34' \
		   '1;34' '  35' '1;35' '  36' '1;36' '  37' '1;37' \
		   '  39' '  00' ; do
	fg=${fgs// /}  # not sure of this construction, but it strips all spaces
	[ "${fgs}" = ' Def' ] && fg=''
	# next three lines shows the first three elements in each row:
	# 1. the progressive vertical y-axis legend (in bold)
	# 2. the foreground colour code (in normal)
	# 3. the test text (in foreground colour)
	echo -en " \033[1m${y_legend[$count]}\033[m  "
	echo -en "${fgs}  "
	echo -en "\033[${fg}m ${txt} \033[m"
	count=$(( $count + 1 ))
	# now display test text in foreground colour
	# against each background colour
	for bg in $( seq 40 47 ) 49 00 ; do
		echo -en " \033[${fg};${bg}m ${txt} \033[m"
	done
	echo
done

# Informational message
echo -e "\nSee manpage for information on using bash colour codes."
