.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DN-MP3FILE-RENAME 1"
.TH DN-MP3FILE-RENAME 1 "2020-12-16" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
dn\-mp3file\-rename \- rename mp3 files according to user formatting template
.SH "VERSION"
.IX Header "VERSION"
This documentation refers to dn\-mp3file\-rename version 0.1.
.SH "USAGE"
.IX Header "USAGE"
\&\fBdn\-mp3file\-rename\fR \fB\-f\fR format
.PP
\&\fBdn\-mp3file\-rename \-h\fR
.SH "REQUIRED ARGUMENTS"
.IX Header "REQUIRED ARGUMENTS"
There are no required arguments.
.SH "REQUIRED OPTIONS"
.IX Header "REQUIRED OPTIONS"
.IP "\fB\-f\fR  \fB\-\-format\fR" 4
.IX Item "-f --format"
Formatting template used to create file base names. Is a string that can
contain the following placeholders: \f(CW%t\fR (title), \f(CW%a\fR (artist), \f(CW%l\fR
(album), \f(CW%y\fR (year), \f(CW%n\fR (track number), and \f(CW%d\fR (disk number). The
template needs to result in unique file base names for each track file. The
\&\fI.mp3\fR extension does not need to be included in the format template.
.Sp
Scalar string. Required.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h\fR" 4
.IX Item "-h"
Display help and exit.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Renames all audio mp3 files in the current directory. The names given to the
files are determined by a format template provided by the user. This template
actually determines the base name of the new file; all files automatically
retain the \fI.mp3\fR extension.
.SS "Placeholders in the format template"
.IX Subsection "Placeholders in the format template"
The format template can contain any of the following placeholders:
.IP "\(bu" 4
\&\f(CW%t\fR = track title
.IP "\(bu" 4
\&\f(CW%a\fR = track artist
.IP "\(bu" 4
\&\f(CW%l\fR = album name
.IP "\(bu" 4
\&\f(CW%y\fR = track year
.IP "\(bu" 4
\&\f(CW%n\fR = track number
.IP "\(bu" 4
\&\f(CW%d\fR = disk number.
.PP
All placeholder values are 'simplified':
.IP "\(bu" 4
converted to lower case
.IP "\(bu" 4
spaces changed to dashes
.IP "\(bu" 4
multiple dashes collapsed to single dashes
.IP "\(bu" 4
leading and trailing dashes removed
.IP "\(bu" 4
punctuations marks such as commas, semicolons, colons, apostrophes,
question marks and exclamation points removed
.IP "\(bu" 4
words like 'a', 'an' and 'the' removed from the beginning.
.SS "Numeric tags"
.IX Subsection "Numeric tags"
Both \*(L"number\*(R" and \*(L"disk\*(R" are positive non-zero integers. Their raw tag values
may be a simple integer indicating track number, e.g., '6', or two integers
indicating track number and total number of tracks, e.g., '6/12'. A simple
algorithm is used to extract the track number: the initial sequence of digits
in the tag is extracted.
.PP
It is a fatal error if a valid track number cannot be extracted from a file's
tags. In contrast, if a valid disk number cannot be extracted it defaults to
\&'1'.
.SS "User confirmation"
.IX Subsection "User confirmation"
The proposed renaming operation is shown to the user, who must give
confirmation before files are renamed.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.SS "No valid track number in file '\s-1FILE\s0'"
.IX Subsection "No valid track number in file 'FILE'"
The audio mp3 track number tag is empty or does not contain a valid track
number. A valid track number is either:
.IP "a single positive non-zero integer, e.g., '6', or" 4
.IX Item "a single positive non-zero integer, e.g., '6', or"
.PD 0
.IP "two positive non-zero integers separated by a slash, e.g., '6/10'." 4
.IX Item "two positive non-zero integers separated by a slash, e.g., '6/10'."
.PD
.SS "Format is an empty string"
.IX Subsection "Format is an empty string"
An empty format string was provided.
.SS "No *.mp3 files found"
.IX Subsection "No *.mp3 files found"
The current directory contains no files with an \fI.mp3\fR extension.
.SS "These files both generate the new file name \s-1FILE: FILE, FILE\s0"
.IX Subsection "These files both generate the new file name FILE: FILE, FILE"
The format template, when applied to two audio mp3 files, generates the same
new file name. This error can be artificially generated by using a format
template (\f(CW\*(C`\-f\*(C'\fR) with no placeholders.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.SS "Perl modules"
.IX Subsection "Perl modules"
autodie, Const::Fast, Dn::Role::HasPath, Dn::Role::HasString,
Dn::Role::HasUserInteraction, English, Function::Parameters, Log::Log4perl,
Moo, MooX::HandlesVia, MooX::Options, MP3::Info, namespace::clean, Path::Tiny,
strictures, Term::ProgressBar::Simple, Text::Unidecode, Types::Path::Tiny,
Types::Standard, utf8, version.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
No configuration files are used.
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
There are no known incompatibilities.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
There are no script-specific exit status values set. Any non-zero exit value is
the exit value of the operation whose failure caused the script to exit, or of
the \f(CW\*(C`die\*(C'\fR command that caused a premature end to execution.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Nebauer (david at nebauer dot org)
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2020 David Nebauer (david at nebauer dot org)
.PP
This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
