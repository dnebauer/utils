.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::Dn::AbcdeRename 3pm"
.TH App::Dn::AbcdeRename 3pm 2024-05-06 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
App::Dn::AbcdeRename \- rename abcde output files
.SH VERSION
.IX Header "VERSION"
This documentation applies to App::Dn::AbcdeRename version 0.3.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  App::Dn::AbcdeRename\->new(artist => $artist)\->rename;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The utility \f(CW\*(C`abcde\*(C'\fR rips cds to disc with each track output to an \fImp3\fR file.
The default output file naming format produces files named like:
.PP
.Vb 1
\&          01.Song_Name.mp3
.Ve
.PP
App::Dn::AbcdeRename provides the \f(CW\*(C`rename\*(C'\fR method which attempts to rename all
\&\fImp3\fR files in the current directory to:
.PP
.Vb 1
\&          artist\-name_track\-number_song\-name.mp3
.Ve
.PP
Note conversion to lowercase. All characters that are not alphanumerics, spaces
or dashes are removed.
.PP
A fatal error occurs if any \fImp3\fR file in the current directory is not named
according to the default \f(CW\*(C`abcde\*(C'\fR output format.
.PP
The artist name must be provided during object instantiation.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
.SS Properties
.IX Subsection "Properties"
None.
.SS "Configuration files"
.IX Subsection "Configuration files"
None used.
.SS "Environment variables"
.IX Subsection "Environment variables"
None used.
.SH OPTIONS
.IX Header "OPTIONS"
.IP artist 4
.IX Item "artist"
This property holds the artist name which is used in the generation of new
file names. Scalar string. Required.
.SH SUBROUTINES/METHODS
.IX Header "SUBROUTINES/METHODS"
.SS \fBrename()\fP
.IX Subsection "rename()"
Renames all \fImp3\fR files in the current directory from naming format:
.PP
.Vb 1
\&          01.Song_Name.mp3
.Ve
.PP
to naming format:
.PP
.Vb 1
\&          artist\-name_track\-number_song\-name.mp3
.Ve
.PP
See "DESCRIPTION" for further details.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.SS "No mp3 files"
.IX Subsection "No mp3 files"
Occurs when there are no \fImp3\fR files in the current directory.
Fatal error.
.SS "No artist found"
.IX Subsection "No artist found"
Was a valid value passed to the \f(CW\*(C`artist\*(C'\fR property at object instantiation?
Fatal error.
.SS "Could not extract name =head2 Could not extract number =head2 Error extracting name and number from file name 'FILE' =head2 Unable to convert 'FILE' =head2 Unable to convert artist 'ARTIST' =head2 Unable to convert track name part 'NAME' of file name 'FILE'"
.IX Subsection "Could not extract name =head2 Could not extract number =head2 Error extracting name and number from file name 'FILE' =head2 Unable to convert 'FILE' =head2 Unable to convert artist 'ARTIST' =head2 Unable to convert track name part 'NAME' of file name 'FILE'"
These errors are triggered by problems converting a \fImp3\fR file to the format:
.PP
.Vb 1
\&          artist\-name_track\-number_song\-name.mp3
.Ve
.PP
Perhaps it was not named according to the default \f(CW\*(C`abcde\*(C'\fR output file format?
Fatal errors.
.SS "Cannot have empty file name"
.IX Subsection "Cannot have empty file name"
This occurs when the user is editing file names and sets a file name to an
empty string.
Fatal error.
.SS "Failed renaming 'FILE' to 'FILE': ERROR"" =head2 Invalid file 'FILE'"
.IX Subsection "Failed renaming 'FILE' to 'FILE': ERROR"" =head2 Invalid file 'FILE'"
These warnings indicate problems with the renaming operation, possibly a system
error.
Non-fatal warnings.
.SS "Did not get both artist and file =head2 No file name pairs =head2 No files in reference =head2 No files reference provided =head2 Not an arrayref"
.IX Subsection "Did not get both artist and file =head2 No file name pairs =head2 No files in reference =head2 No files reference provided =head2 Not an arrayref"
These are internal programming error messages.
If one of them occurs it indicates a logic error in the module that needs to be
fixed.
Please report the error to the module maintainer.
Fatal errors.
.SH INCOMPATIBILITIES
.IX Header "INCOMPATIBILITIES"
None known.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs have been reported.
.SH DEPENDENCIES
.IX Header "DEPENDENCIES"
Carp, Const::Fast, App::Dn::AbcdeRename::Pair, English, File::Copy, Moo,
MooX::HandlesVia, MooX::Options, Role::Utils::Dn, strictures, Text::Unaccent,
Types::Standard, version.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Copyright 2024, David Nebauer
.SH AUTHOR
.IX Header "AUTHOR"
David Nebauer <david@nebauer.org>
