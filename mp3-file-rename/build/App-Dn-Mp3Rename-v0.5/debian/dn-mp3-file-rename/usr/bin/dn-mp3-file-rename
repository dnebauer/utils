#!/usr/bin/perl

# use modules    {{{1
use Moo;
use strictures 2;
use 5.006;
use 5.038_001;
use version; our $VERSION = qv('0.5');
use namespace::clean;    # }}}1

{

  package Dn::Internal;

  # use modules    {{{1
  use Moo;
  use strictures 2;
  use namespace::clean -except => [ '_options_data', '_options_config' ];
  use App::Dn::Mp3Rename;
  use Carp qw(croak);
  use Const::Fast;
  use English;
  use MooX::Options protect_argv => 0;
  use Types::Standard;

  const my $TRUE => 1;    # }}}1

  # option

  # format  (-f)    {{{1
  option 'format' => (
    is       => 'ro',
    format   => 's',
    required => $TRUE,
    short    => 'f',
    doc      => 'Filename format template',
  );    # }}}1

  # attribute

  # _format    {{{1
  has '_format' => (
    is       => 'ro',
    isa      => Types::Standard::Str,
    lazy     => $TRUE,
    required => $TRUE,
    default  => sub {
      my $self => shift;
      my $format = $self->format;
      if (not $format) { croak 'Format is an empty string'; }
      return $format;
    },
    doc => 'Filename format template', ## no critic (ProhibitDuplicateLiteral)
  );                                   # }}}1

  # method

  # main()    {{{1
  #
  # does:   main method
  # params: nil
  # prints: feedback
  # return: n/a, dies on failure
  sub main ($self) {    ## no critic (RequireInterpolationOfMetachars)

    my $format    = $self->_format;
    my $mp3rename = App::Dn::Mp3Rename->new(format => $format);
    $mp3rename->run;

    return;
  }                     # }}}1

}

my $p = Dn::Internal->new_with_options->main;

1;

# POD    {{{1

__END__

=head1 NAME

dn-mp3file-rename - rename mp3 files according to user formatting template

=head1 VERSION

This documentation refers to dn-mp3file-rename version 0.5.

=head1 USAGE

B<dn-mp3file-rename> B<-f> format

B<dn-mp3file-rename -h>

=head1 REQUIRED ARGUMENTS

There are no required arguments.

=head1 REQUIRED OPTIONS

=over

=item B<-f>  B<--format>

Formatting template used to create file base names. Is a string that can
contain the following placeholders: C<%t> (title), C<%a> (artist), C<%l>
(album), C<%y> (year), C<%n> (track number), and C<%d> (disk number). The
template needs to result in unique file base names for each track file. The
F<.mp3> extension does not need to be included in the format template.

Scalar string. Required.

=back

=head1 OPTIONS

=over

=item B<-h>

Display help and exit.

=back

=head1 DESCRIPTION

Renames all audio mp3 files in the current directory. The names given to the
files are determined by a format template provided by the user. This template
actually determines the base name of the new file; all files automatically
retain the F<.mp3> extension.

=head2 Placeholders in the format template

The format template can contain any of the following placeholders:

=over

=item *

C<%t> = track title

=item *

C<%a> = track artist

=item *

C<%l> = album name

=item *

C<%y> = track year

=item *

C<%n> = track number

=item *

C<%d> = disk number.

=back

All placeholder values are 'simplified':

=over

=item *

converted to lower case

=item *

spaces changed to dashes

=item *

multiple dashes collapsed to single dashes

=item *

leading and trailing dashes removed

=item *

punctuations marks such as commas, semicolons, colons, apostrophes,
question marks and exclamation points removed

=item *

words like 'a', 'an' and 'the' removed from the beginning.

=back

=head2 Numeric tags

Both "number" and "disk" are positive non-zero integers. Their raw tag values
may be a simple integer indicating track number, e.g., '6', or two integers
indicating track number and total number of tracks, e.g., '6/12'. A simple
algorithm is used to extract the track number: the initial sequence of digits
in the tag is extracted.

It is a fatal error if a valid track number cannot be extracted from a file's
tags. In contrast, if a valid disk number cannot be extracted it defaults to
'1'.

=head2 User confirmation

The proposed renaming operation is shown to the user, who must give
confirmation before files are renamed.

=head1 DIAGNOSTICS

=head2 No valid track number in file 'FILE'

The audio mp3 track number tag is empty or does not contain a valid track
number. A valid track number is either:

=over

=item *

a single positive non-zero integer, e.g., '6', or

=item *

two positive non-zero integers separated by a slash, e.g., '6/10'.

=back

=head2 Format is an empty string

An empty format string was provided.

=head2 No *.mp3 files found

The current directory contains no files with an F<.mp3> extension.

=head2 These files both generate the new file name FILE: FILE, FILE

The format template, when applied to two audio mp3 files, generates the same
new file name. This error can be artificially generated by using a format
template (C<-f>) with no placeholders.

=head1 DEPENDENCIES

=head2 Perl modules

App::Dn::Mp3Rename, Carp, Const::Fast, English, Moo, MooX::Options,
namespace::clean, strictures, Types::Standard, version.

=head1 CONFIGURATION

No configuration files are used.

=head1 INCOMPATIBILITIES

There are no known incompatibilities.

=head1 EXIT STATUS

There are no script-specific exit status values set. Any non-zero exit value is
the exit value of the operation whose failure caused the script to exit, or of
the C<die> command that caused a premature end to execution.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head1 AUTHOR

David Nebauer (david at nebauer dot org)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2024 David Nebauer (david at nebauer dot org)

This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut

# vim:foldmethod=marker:
