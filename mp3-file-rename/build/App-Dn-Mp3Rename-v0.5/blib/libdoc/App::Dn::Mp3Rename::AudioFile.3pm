.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::Dn::Mp3Rename::AudioFile 3pm"
.TH App::Dn::Mp3Rename::AudioFile 3pm 2024-06-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
App::Dn::Mp3Rename::AudioFile \- mp3 file properties
.SH VERSION
.IX Header "VERSION"
This documentation refers to dn\-mp3file\-rename version 0.5.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&      my $audiofile = Dn::MP3Rename::AudioFile\->new(filepath => $file);
\&      $audiofile\->initialise;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is a helper module for App::Dn::Mp3Rename.
It models some properties and behaviours of an mp3 audio file.
.SH SUBROUTINES/METHODS
.IX Header "SUBROUTINES/METHODS"
.SS \fBinitialise()\fP
.IX Subsection "initialise()"
\fIPurpose\fR
.IX Subsection "Purpose"
.PP
Ensure all tags are extracted and all attributes are set. It can be used to
ensure all tags are extracted from a file at once (to avoid multiple disk
operations).
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.PP
None.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
Void.
.ie n .SS "new_filename($format, $num_width, $disk_width)"
.el .SS "new_filename($format, \f(CW$num_width\fP, \f(CW$disk_width\fP)"
.IX Subsection "new_filename($format, $num_width, $disk_width)"
\fIPurpose\fR
.IX Subsection "Purpose"
.PP
Derive a new filename using a format template with placeholders as described in
"DESCRIPTION" in App::Dn::Mp3Rename.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.ie n .IP $format 4
.el .IP \f(CW$format\fR 4
.IX Item "$format"
Format template. Scalar string. Required.
.ie n .IP $num_width 4
.el .IP \f(CW$num_width\fR 4
.IX Item "$num_width"
Width of track number. Scalar integer. Required.
.ie n .IP $disk_width 4
.el .IP \f(CW$disk_width\fR 4
.IX Item "$disk_width"
Width of disk number. Scalar integer. Required.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Feedback.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
Void.
.SS "\fBalbum()\fP, \fBartist()\fP, \fBdisk()\fP, \fBnumber()\fP, \fBtitle()\fP, \fByear()\fP"
.IX Subsection "album(), artist(), disk(), number(), title(), year()"
\fIPurpose\fR
.IX Subsection "Purpose"
.PP
Return an mp3 file tag value: track album, track artist, disk number,
track number, track title, and track year, respectively.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.PP
None.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Nothing.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
Scalar string. The value for track album, track artist, disk number,
track number, track title, and track year, respectively.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
.SS Properties
.IX Subsection "Properties"
\fIfilepath\fR
.IX Subsection "filepath"
.PP
File path of audio track. Required.
.SS "Configuration files"
.IX Subsection "Configuration files"
None used.
.SS "Environment variables"
.IX Subsection "Environment variables"
None used.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.SS "No valid track number in file 'FILE'"
.IX Subsection "No valid track number in file 'FILE'"
The audio mp3 track number tag is empty or does not contain a valid track
number. A valid track number is either:
.IP \(bu 4
a single positive non-zero integer, e.g., '6', or
.IP \(bu 4
two positive non-zero integers separated by a slash, e.g., '6/10'.
.SH DEPENDENCIES
.IX Header "DEPENDENCIES"
.SS "Perl modules"
.IX Subsection "Perl modules"
App::Dn::Mp3Rename::Role, autodie, Carp, Const::Fast, English, MP3::Info, Moo,
namespace::clean, Role::Utils::Dn, strictures, Types::Path::Tiny,
Types::Standard, version.
.SH INCOMPATIBILITIES
.IX Header "INCOMPATIBILITIES"
There are no known incompatibilities.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
There are no script-specific exit status values set. Any non-zero exit value is
the exit value of the operation whose failure caused the script to exit, or of
the \f(CW\*(C`die\*(C'\fR command that caused a premature end to execution.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs to the author.
.SH AUTHOR
.IX Header "AUTHOR"
David Nebauer (david at nebauer dot org)
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2024 David Nebauer (david at nebauer dot org)
.PP
This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
