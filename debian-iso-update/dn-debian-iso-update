#!/usr/bin/env bash

# File: dn-debian-iso-update
# Author: David Nebauer (david at nebauer dot org)
# Purpose: Update debian iso images using jigdo
# Created: 2021-01-10


# VARIABLES

# {{{1
source '@libexec_dir@/libdncommon-bash/liball'  # supplies functions
system_conf='@pkgconf_dir@/@pkg@.rc'
usage='Usage:'
usage_indent="$(tr "${usage}" '[ *]' <<< "${usage}")"
parameters='[ -l int ] [ -r int ]'
# configurable variables
file_base=    # common stem of jigdo/template/iso file names
dir_files=    # directory containing jigdo/template/iso files
url_base=     # url to server directory with jigdo/template files
mnt_base=     # base mount directory
# variables that can be passed to script
lower=0
upper=0    # }}}1


# PROCEDURES

# Show usage    {{{1
#   params: nil
#   prints: nil
#   return: nil
displayUsage () {
cat << _USAGE
${dn_self}: Update debian iso images using jigdo

Updates debian iso image files created using jigdo. Requires
an existing iso image setup, including the files being
mounted.

The script makes a number of assumptions about the iso
image configuration. See the manpage for details.

${usage} ${dn_self} ${parameters}
${usage_indent} ${dn_self} -h

Options: -l OPT = lowest iso image number to process [integer]
         -u OPT = highest iso image number to process [integer]
_USAGE
}
# Process configuration files    {{{1
#   params: 1 - global config filepath (optional)
#   prints: nil
#   return: nil
#   notes:  set variables [file_base, dir_files, url_base, mnt_base]
processConfigFiles () {
   # set variables
   local name val conf
    conf="$( dnNormalisePath "${1}" )"
   # process config files
    if [[ -r "${conf}" ]] ; then
        while read name val ; do
            if [[ -n "${val}" ]] ; then
                # remove enclosing quotes if present
                val="$( dnStripEnclosingQuotes "${val}" )"
                # load vars depending on name
                case ${name} in
                file_base ) file_base="${val}" ;;
                dir_files ) dir_files="$(sed 's:/*$::' <<< "${val}")" ;;
                url_base  ) url_base="$(sed 's:/*$::' <<< "${val}")" ;;
                mnt_base  ) mnt_base="$(sed 's:/*$::' <<< "${val}")" ;;
                esac
            fi
        done < "${conf}"
    fi
}
# Process command line    {{{1
#   params: all command line parameters
#   prints: feedback
#   return: nil
#   note:   after execution variable ARGS contains
#           remaining command line args (after options removed)
processCommandLine () {
   # read the command line options
    local OPTIONS="$(                    \
        getopt                           \
            --options hl:u:              \
            --long    help,lower:,upper: \
            --name    "${dn_self}"       \
            -- "${@}"                    \
    )"
    eval set -- "${OPTIONS}"
    dnOpFail ${?} && abort 'Unable to parse command line options'
   while true ; do
      case "${1}" in
        -h | --help  ) displayUsage ; exit 0  ;;
        -l | --lower ) lower="${2}" ; shift 2 ;;
        -u | --upper ) upper="${2}" ; shift 2 ;;
        -- ) shift ; break ;;
        *  ) break ;;
      esac
   done
   ARGS="${@}"  # remaining arguments
}
# Write message to system log    {{{1
#   params: 1 - prefix [required]
#           2 - message [required]
#           3 - priority [optional, default='info']
#               can be emerg|alert|crit|err|warning|notice|info|debug
#   prints: nil
#   return: nil
log () {
    # process parameters
    local prefix ; prefix="${1}"
    local message ; message="${2}"
    local priority ; priority="${3}"
    if test -z "${priority}" ; then priority="info" ; fi
    # log message if logger is available
    local exe ; exe="/usr/bin/logger"
    [[ -x "${exe}" ]] \
        && ${exe} --priority "${priority}" --tag "${prefix}" "${message}"
}
# Abort script with error message    {{{1
#   params: 1 - message [required]
#   prints: nil
#   return: nil
abort () {
    log "${dn_self}" "$1" 'err'
    exit 1
}
# Write informational message to system log    {{{1
#   params: 1 - message [required]
#   prints: nil
#   return: nil
info () {
    log "${dn_self}" "$1" 'info'
}    # }}}1


# MAIN

# Process configuration files    {{{1
# - after which $ARGS contains non-option command line arguments
processConfigFiles "${system_conf}"
unset system_conf

# Process command line    {{{1
processCommandLine "${@}"
unset parameters  usage  usage_indent

# Check for configured values    {{{1
# - file_base
[[ -n "${file_base}" ]] \
    || abort "Variable 'file_base' not configured"
# - dir_files
[[ -n "${dir_files}" ]] \
    || abort "Variable 'dir_files' not configured"
[[ -d "${dir_files}" ]] \
    || abort "'dir_files' directory not found: ${dir_files}"
# - url_base
[[ -n "${url_base}" ]] \
    || abort "Variable 'url_base' not configured"
# - mnt_base
[[ -n "${mnt_base}" ]] \
    || abort "Variable 'mnt_base' not configured"
[[ -d "${mnt_base}" ]] \
    || abort "'mnt_base' directory not found: ${mnt_base}"

# Check options    {{{1
dnValidPosInteger "${lower}" \
    || abort "Lower iso image number (${lower}) is not a positive integer"
dnValidPosInteger "${upper}" \
    || abort "Upper iso image number (${upper}) is not a positive integer"

# Check for internet connection    {{{1
# - 8.8.8.8 = google-public-dns-a.google.com
# - 8.8.4.4 = google-public-dns-a.google.com
# - 1.1.1.1 = Cloudflare DNS resolver
# - 139.130.4.5 = ns1.tesltra.net
ping_urls=(8.8.8.8  1.1.1.1  8.8.4.4  139.130.4.5)
dnCheckInternet ${ping_urls[@]} \
    || abort 'Unable to connect to internet'

# Check for max and min iso image numbers    {{{1
# - include check for reasonableness, i.e., min > 1 and max >= 16
iso_min_num=1000000
iso_max_num=0
fp_base="${dir_files}/${file_base}"
for file in ${fp_base}* ; do
    remove_prefix="${file#${fp_base}}"
    number=$(echo "${remove_prefix}" \
                  | sed -e 's/^\([[:digit:]]\{1,\}\).*$/\1/')
    if ! grep "^[[:digit:]]\+$" <<< "${number}" &>/dev/null ; then
        abort "Cannot extract iso image number from file: ${file}"
    fi
    [ ${number} -gt ${iso_max_num} ] && iso_max_num=${number}
    [ ${number} -lt ${iso_min_num} ] && iso_min_num=${number}
done
[[ ${iso_min_num} -eq 1 ]] \
    || abort "Unrealistic minimum iso image number of ${iso_min_num}"
[[ ${iso_max_num} -le 16 ]] \
    || abort "Unrealistic maximum iso image number of ${iso_max_num}"

# Override boundary iso numbers if necessary    {{{1
# - already confirmed 'lower' and 'upper' are positive integers
#   so can safely do numeric comparisons
err="is outside of iso image number range (${iso_min_num}-${iso_max_num})"
if [[ ${lower} -gt 0 ]] ; then
    [[ ${lower} -ge ${iso_min_num} ]] \
        || abort "Lower bound (${lower}) ${err}"
    [[ ${lower} -le ${iso_max_num} ]] \
        || abort "Lower bound (${lower}) ${err}"
fi
if [[ ${upper} -gt 0 ]] ; then
    [[ ${upper} -ge ${iso_min_num} ]] \
        || abort "Upper bound (${upper}) ${err}"
    [[ ${upper} -le ${iso_max_num} ]] \
        || abort "Upper bound (${upper}) ${err}"
fi
unset err
if [[ ${lower} -gt 0 ]] && [[ ${upper} -gt 0 ]] ; then
    [[ ${lower} -le ${upper} ]] \
        || abort "Lower bound (${lower}) greater than upper bound (${upper})"
fi
# - if here then presume override values, if any, are valid
[[ ${lower} -gt 0 ]] && iso_min_num=${lower}
[[ ${upper} -gt 0 ]] && iso_max_num=${upper}
info "Processing iso images ${iso_min_num} to ${iso_max_num}"

# Check for mirror default values    {{{1
rc="${HOME}/.jigdo-lite"
[ -f "${rc}" ] \
    || abort "Cannot locate configuration file: ${rc}"
grep "^debianMirror='[^']\+'$" "${rc}" &>/dev/null \
    || abort "No 'debianMirror' value in configuration file: ${rc}"
grep "^nonusMirror='[^']\+'$" "${rc}" &>/dev/null \
    || abort "No 'debianMirror' value in configuration file: ${rc}"
mirror_debian="$(grep "^debianMirror='[^']\+'$" "${rc}" \
                 | sed -e "s/^debianMirror='\([^']\{1,\}\)'$/\1/")"
mirror_nonus="$(grep "^nonusMirror='[^']\+'$" "${rc}" \
                | sed -e "s/^nonusMirror='\([^']\{1,\}\)'$/\1/")"
info "Using default debian mirror: ${mirror_debian}"
info "Using default non-us mirror: ${mirror_nonus}"    # }}}1

# Process iso images in sequence
for iso_num in $(seq ${iso_min_num} ${iso_max_num}) ; do
    # Download '.jigdo' and '.template' files    {{{1
    for ext in jigdo template ; do
        fname="${file_base}${iso_num}.${ext}"
        fp="${dir_files}/${fname}"
        url="${url_base}/${fname}"
        # delete old copy of file
        [ -f "${fp}" ] \
            || abort "Cannot find existing file: ${fp}"
        rm "${fp}" \
            || abort "Unable to delete file: ${fp}"
        # download file
        wget --no-directories --directory-prefix="${dir_files}" "${url}" \
            || abort "Unable to download '${url}' to '${dir_files}'"
    done

    # Rename existing iso image    {{{1
    iso_fname="${file_base}${iso_num}.iso"
    iso_old_fname="${file_base}${iso_num}-old.iso"
    iso_fp="${dir_files}/${iso_fname}"
    iso_old_fp="${dir_files}/${iso_old_fname}"
    [ -f "${iso_fp}" ] \
        || abort "Cannot find existing iso image: ${iso_fp}"
    mv "${iso_fp}" "${iso_old_fp}" \
        || abort "Unable to rename iso image: ${iso_fp}"

    # Download and assemble iso image    {{{1
    if [ "$(pwd)" != "${dir_files}" ] ; then
        cd "${dir_files}" \
            || abort "Unable to cd to directory: ${dir_files}"
    fi
    jigdo_file="${file_base}${iso_num}.jigdo"
    jigdo-lite --scan "${iso_old_fp}" --noask "${jigdo_file}" \
        || abort "Jigdo unable to update iso image: ${jigdo_file}"

    # Remount new iso file and delete old iso file    {{{1
    mnt_point="${mnt_base}/${iso_num}"
    umount "${mnt_point}" \
        || abort "Unable to unmount mount point: ${mnt_point}"
    mount "${mnt_point}" \
        || abort "Unable to (re)mount mount point: ${mnt_point}"
    rm "${iso_old_fp}" \
        || abort "Unable to remove old iso image: ${iso_old_fp}"    # }}}1
done

# Finished    {{{1
info "Successfully updated iso images ${iso_min_num} to ${iso_max_num}"  # }}}1

# vim:foldmethod=marker:
