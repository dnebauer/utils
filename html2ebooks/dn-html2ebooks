#!/usr/bin/env perl

use Moo;                 # {{{1
use strictures 2;
use 5.006;
use 5.036_001;
use version; our $VERSION = qv('0.1');
use namespace::clean;    # }}}1

# package Dn::Html2Ebooks::Format    {{{1
{

  package Dn::Html2Ebooks::Format;

  use Moo;                # {{{2
  use strictures 2;
  use namespace::clean;
  use MooX::HandlesVia;
  use Types::Standard;    # }}}2

  # attributes

  # name    {{{2
  has 'name' => (
    is  => 'ro',
    isa => Types::Standard::Str,
    doc => 'Format name',
  );

  # args, add_args    {{{2
  has '_arguments_list' => (
    is          => 'rw',
    isa         => Types::Standard::ArrayRef [Types::Standard::Str],
    default     => sub { [] },
    handles_via => 'Array',
    handles     => {
      args     => 'elements',
      add_args => 'push',
    },
    doc => 'Arguments for conversion command',
  );    # }}}2

}    # }}}1

{

  package Dn::Html2Ebooks;    ## no critic (ProhibitMultiplePackages)

  # modules    {{{1
  use Moo;
  use strictures 2;
  use namespace::clean -except => [ '_options_data', '_options_config' ];
  use Carp qw(croak);
  use Const::Fast;
  use IPC::Cmd;
  use MooX::HandlesVia;
  use MooX::Options protect_argv => 0;
  use Types::Standard;

  with qw(Role::Utils::Dn);

  const my $TRUE  => 1;
  const my $FALSE => 0;    # }}}1

  # options

  # base_name (-b)    {{{1
  option 'base_name' => (
    is       => 'ro',
    format   => 's',
    required => $TRUE,
    short    => 'b',
    doc      => 'Basename of input and output files',
  );

  # title    (-t)    {{{1
  option 'title' => (
    is       => 'ro',
    format   => 's',               ## no critic (ProhibitDuplicateLiteral)
    required => $TRUE,
    short    => 't',
    doc      => 'Title of book',
  );

  # author   (-a)    {{{1
  option 'author' => (
    is       => 'ro',
    format   => 's',                   ## no critic (ProhibitDuplicateLiteral)
    required => $TRUE,
    short    => 'a',
    doc      => 'Author(s) of book',
  );                                   # }}}1

  # attributes

  # _converter    {{{1
  has '_converter' => (
    is      => 'ro',
    isa     => Types::Standard::Str,
    lazy    => $TRUE,
    default => sub {

      # abort if ebook-convert is not available
      my $self      = shift;
      my $converter = 'ebook-convert';
      if (not $self->path_executable($converter)) {
        die "Cannot locate ebook converter '$converter'\n";
      }
      return $converter;
    },
    doc => 'Shown in usage',
  );

  # _source    {{{1
  has '_source' => (
    is      => 'ro',
    isa     => Types::Standard::Str,
    lazy    => $TRUE,
    default => sub {

      # abort if no source file
      my $self     = shift;
      my $basename = $self->base_name;
      my $source;
      for my $ext (qw(html htm)) {
        my $file = $basename . q[.] . $ext;
        if ($self->file_readable($file)) {
          $source = $file;
        }
      }
      if (not $source) {
        die "Can't find source file '$basename.htm[l]'\n";
      }
      return $source;
    },
    doc => 'Source html file',
  );

  # _cover    {{{1
  has '_cover' => (
    is      => 'ro',
    isa     => Types::Standard::Maybe [Types::Standard::Str],
    lazy    => $TRUE,
    default => sub {
      my $self = shift;
      my $file = $self->base_name . '.png';
      return $self->file_readable($file) ? $file : undef;
    },
    doc => 'Cover png file',
  );

  # _today    {{{1
  has '_today' => (
    is      => 'ro',
    isa     => Types::Standard::Str,
    lazy    => $TRUE,
    default => sub {
      my $self = shift;
      return $self->date_current_iso();
    },
    doc => q[ Today's date in ISO 8601 format ],
  );

  # _formats    {{{1
  has '_formats_list' => (
    is  => 'ro',
    isa => Types::Standard::ArrayRef [
      Types::Standard::InstanceOf ['Dn::Html2Ebooks::Format'],
    ],
    lazy    => $TRUE,
    default => sub {
      my $self = shift;

      # variables    {{{2
      my $converter = $self->_converter;
      my $source    = $self->_source;
      my $base      = $self->file_base($source);
      my $cover     = $self->_cover;
      my $date      = $self->_today;
      my $title     = $self->title;
      my $author    = $self->author;               # }}}2

      my @formats;

      # Mobipocket e-book (mobi)    {{{2
      my $mobi = Dn::Html2Ebooks::Format->new(name => 'Mobipocket e-book',);
      $mobi->add_args(
        $converter,            $source,
        $base . '.mobi',       '--no-inline-toc',
        '--pretty-print',      '--smarten-punctuation',
        '--insert-blank-line', '--keep-ligatures',
        '--title=' . $title,   '--authors=' . $author,
        '--language=en_AU',    '--pubdate=' . $date,
      );
      if ($cover) {
        $mobi->add_args('--cover=' . $cover);
      }
      push @formats, $mobi;

      # Electronic publication (epub)    {{{2
      my $epub =
          Dn::Html2Ebooks::Format->new(name => 'Electronic publication',);
      ## no critic (ProhibitDuplicateLiteral)
      $epub->add_args(
        $converter,              $source,
        $base . '.epub',         '--pretty-print',
        '--smarten-punctuation', '--insert-blank-line',
        '--keep-ligatures',      '--title=' . $title,
        '--authors=' . $author,  '--language=en_AU',
        '--pubdate=' . $date,
      );
      if ($cover) {
        $epub->add_args('--cover=' . $cover);
      }
      ## use critic
      push @formats, $epub;

      # Kindle Format 8 (azw3)    {{{2
      my $azw3 = Dn::Html2Ebooks::Format->new(name => 'Kindle Format 8',);
      ## no critic (ProhibitDuplicateLiteral)
      $azw3->add_args(
        $converter,            $source,
        $base . '.azw3',       '--no-inline-toc',
        '--pretty-print',      '--smarten-punctuation',
        '--insert-blank-line', '--keep-ligatures',
        '--title=' . $title,   '--authors=' . $author,
        '--language=en_AU',    '--pubdate=' . $date,
      );
      if ($cover) {
        $azw3->add_args('--cover=' . $cover);
      }
      ## use critic
      push @formats, $azw3;    # }}}2

      return [@formats];
    },
    handles_via => 'Array',
    handles     => { _formats => 'elements', },
    doc         => 'Array of format objects',
  );    # }}}1

  # methods

  # main()    {{{1
  #
  # does:   main method
  # params: nil
  # prints: feedback
  # return: n/a, dies on failure
  sub main ($self) {    ## no critic (RequireInterpolationOfMetachars)

    # produce ebooks
    for my $format ($self->_formats) {
      my $name = $format->name;
      my @args = $format->args;
      say "\nConverting to $name" or croak;
      $self->run_command("Conversion to $name failed", @args);
    }
    say 'Completed conversion to ebooks' or croak;

    return $TRUE;
  }                     # }}}1

}

my $p = Dn::Html2Ebooks->new_with_options->main;

1;

# POD    {{{1

## no critic (RequirePodSections)

__END__

=encoding utf8

=head1 NAME

dn-html2ebooks - convert html file to ebook formats

=head1 USAGE

B<dn-html2ebooks> B<-b> I<basename> B<-t> I<title> B<-a> I<author>

B<dn-html2ebooks -h>

=head1 REQUIRED OPTIONS

=over

=item B<-b>  B<--basename> I<basename>

Basename (file name without extension) of source html file.

Scalar string. Required.

=item B<-t>  B<--title> I<title>

Title of book. Enclose in quotes if it contains spaces.

Scalar string. Required.

=item B<-a>  B<--author> I<author>

Author (or authors) of book. Enclose in quotes if it contains spaces.

Scalar string. Required.

=back

=head1 DESCRIPTION

Converts an html file in the current directory named F<basename.html> or
F<basename.htm> where "basename" is the option provided to the C<-b> option.
This source file is converted to the following formats and output files:

=over

=item Mobipocket e-book (F<basename.mobi>)

=item Electronic publication (F<basename.epub>)

=item Kindle Format 8 (F<basename.epub>)

=back

Output files are written to the current directory and silently overwrite any
existing output files of the same name.

If there is a png image file in the current directory called F<basename.png> it
will be used as a cover image for the ebooks.

The conversions are performed by F<ebook-convert>, part of the Calibre suite on
debian systems.

=head1 DEPENDENCIES

=head2 Perl modules

Carp, Const::Fast, IPC::Cmd, Moo, MooX::HandlesVia, MooX::Options,
namespace::clean, Role::Utils::Dn, strictures, Types::Standard.

=head2 Executables

ebook-convert.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head1 AUTHOR

David Nebauer (david at nebauer dot org)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2017 David Nebauer (david at nebauer dot org)

This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut
# vim:fdm=marker

