#!/usr/bin/perl 

use Moo;    # {{{1
use strictures 2;
use 5.014_002;
use version; our $VERSION = qv('0.1');
use namespace::clean;    # }}}1

{

    package Dn::PkgUpdate;

    use Moo;             # {{{1
    use strictures 2;
    use namespace::clean -except => [ '_options_data', '_options_config' ];
    use Env qw(USER);
    use Function::Parameters;
    use MooX::HandlesVia;
    use MooX::Options;
    use Readonly;
    use Types::Standard qw(ArrayRef Str);
    use Dn::Common;
    my $cp = Dn::Common->new();

    Readonly my $TRUE  => 1;
    Readonly my $FALSE => 0;    # }}}1

    # options

    # option ignore_failure (-i)    {{{1
    option 'ignore_failure' => (
        is            => 'ro',
        required      => $FALSE,
        short         => 'i',
        documentation => 'Continue after failed command',
    );    # }}}1
          # option final_prompt   (-p)    {{{1
    option 'final_prompt' => (
        is            => 'ro',
        required      => $FALSE,
        short         => 'p',
        documentation => 'Prompt when finished',
    );    # }}}1

    # attributes

    # _cmds    {{{1
    has '_cmd_list' => (
        is  => 'ro',
        isa => Types::Standard::ArrayRef [
            Types::Standard::ArrayRef [Types::Standard::Str]
        ],
        required      => $TRUE,
        builder       => '_build_cmd_list',
        handles_via   => 'Array',
        handles       => { _cmds => 'elements', },
        documentation => q{Aptitude commands},
    );

    method _build_cmd_list () {
        my $cmds = [
            ['dn-local-apt-repository-update-all-dirs'],
            [ 'aptitude', 'update' ],
            [ 'aptitude', '--autoclean-on-startup' ],
            [ 'aptitude', 'install' ],
        ];
        if ( $USER ne 'root' ) {
            foreach my $cmd ( @{$cmds} ) {
                unshift @{$cmd}, 'sudo';
            }
        }
        return $cmds;
    }    # }}}1

    # methods

    # main()    {{{1
    #
    # does:   main method
    # params: nil
    # prints: feedback
    # return: n/a, dies on failure
    method main () {

        # check for defined apps
        if ( not $self->_cmds ) { die "No apps defined\n"; }
        my @cmds = $self->_cmds;

        # check for internet connection
        if ( not $cp->internet_connection() ) {
            die "No internet connection detected\n";
        }
        foreach my $cmd_parts (@cmds) {
            my @cmd = @{$cmd_parts};
            say "\nRunning [" . ( join q{ }, @cmd ) . "]...\n";
            if ( !eval { system @cmd; 1 } ) {
                if ( not $self->ignore_failure ) {
                    die "Command failed, aborting...\n";
                }
            }
        }
        if ( $self->final_prompt ) { $cp->prompt(); }
    }    # }}}1

}

my $p = Dn::PkgUpdate->new_with_options->main;

1;

# POD    {{{1

__END__

=head1 NAME

dn-pkg-update - update existing, and install new, debian packages

=head1 USAGE

B<dn-pkg-update> [ I<-i> ] [ I<-f> ]

B<dn-pkg-update -h>

=head1 OPTIONS

=over

=item B<-f>

Display a prompt when finished. Designed for use when called inside a new
terminal, to allow for the user to see feedback before the terminal closes.
Boolean.

Optional. Default: false.

=item B<-i>

Whether to continue with further commands after a command fails. Boolean.

Optional. Default: false.

=item B<-h>

Display help and exit.

=back

=head1 DESCRIPTION

Gives user an opportunity to update existing packages and potentially install
additional packages.

This script runs the following commands in sequence:

=over

=item C<dn-local-apt-repository-update-all-dirs>

=item C<aptitude update>

=item C<aptitude --autoclean-on-startup>

=item C<aptitude install>

=back

Package management is a superuser activity. If the user is not root the package
management commands are run with C<sudo>.

=head1 DEPENDENCIES

=head2 Perl modules

Dn::Common, Env, Function::Parameters, Moo, MooX::HandlesVia, MooX::Options,
namespace::clean, Readonly, strictures, Types::Standard, version.

=head2 Executables

aptitude, dn-local-apt-repository-update-all-dirs, perl, sudo.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head1 AUTHOR

David Nebauer E<lt>davidnebauer@hotkey.net.auE<gt>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2015 David Nebauer E<lt>davidnebauer@hotkey.net.auE<gt>

This script is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
# vim:fdm=marker
