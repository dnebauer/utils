.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DN-PASS-DUMP 1"
.TH DN-PASS-DUMP 1 "2021-09-19" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
dn\-pass\-dump \- write passwords to file
.SH "USAGE"
.IX Header "USAGE"
\&\fBdn-pass-dump\fR [\fB\-a\fR \fIauthor\fR] [\fB\-d\fR \fIfile\fR] [\fB\-f\fR \fIformat\fR] [\fB\-r\fR
\&\fIdir\fR] [\fB\-p\fR]
.PP
\&\fBdn-pass-dump \-h\fR
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a\fR  \fB\-\-author\fR" 4
.IX Item "-a --author"
Author to put in header of dump file.
.Sp
String. Optional. Default: 'David Nebauer'.
.IP "\fB\-d\fR  \fB\-\-dump_file\fR" 4
.IX Item "-d --dump_file"
Path of dump file.
.Sp
File path. Optional. Default: \fI~/.password\-store/dump.{md,txt}\fR where the
extension depends on output format \- 'md' for markdown output and 'txt' for
text output.
.IP "\fB\-f\fR  \fB\-\-format\fR" 4
.IX Item "-f --format"
Format of output.
.Sp
String. Optional. Must be either 'markdown' or 'text'. Default: 'markdown'.
.IP "\fB\-p\fR  \fB\-\-preserve\fR  \fB\-\-no\-preserve\fR" 4
.IX Item "-p --preserve --no-preserve"
Whether to preserve an existing dump file.
.Sp
Boolean. Optional. Default: false.
.IP "\fB\-r\fR  \fB\-\-root\fR" 4
.IX Item "-r --root"
Root passwords directory.
.Sp
Directory path. Optional. Default: \fI~/.password\-store\fR.
.IP "\fB\-h\fR" 4
.IX Item "-h"
Display help and exit.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script accesses password information stored by
Pass <https://www.passwordstore.org/>, \*(L"the standard unix password manager\*(R",
and dumps (writes) it to an output file. The output format can be plain text or
markdown.
.SS "Pass configuration"
.IX Subsection "Pass configuration"
The script accesses all password files stored in the password file tree. It
does this one at a time. It is not possible for the user to enter their
password for accessing these files because all console output is being
captured. For that reason the script initially accesses just one password file
without capturing the output, i.e., the user is able to enter the password for
this file. Pass must be configured to stay authenticated for a few minutes;
this can be done using
gpg-agent <https://www.gnupg.org/documentation/manuals/gnupg/>.
.SS "Output format"
.IX Subsection "Output format"
The output file has a header which includes a title, author and date of
writing. The file has a footer which states '\s-1END OF FILE\s0'.
.PP
In between the header and footer is a section for each password file, listed
alphabetically and with a horizontal line between them.
.PP
Here is the layout for each password section:
.PP
.Vb 1
\&    url
\&
\&    password
\&
\&    field_1: value_1
\&    field_2: value_2
\&    etc.
.Ve
.PP
In markdown-formatted output:
.IP "\(bu" 4
The url is a second-level header.
.IP "\(bu" 4
The password is placed within a code fence.
.IP "\(bu" 4
Values which include a '/' or '\e' can cause fatal errors during pdf generation.
For this reason any values containing either of these characters are enclosed
in backticks to ensure they are rendered as code spans. (This prevents their
interference with pdf production.) Unfortunately, most pdf generation processes
do not wrap code spans, so if they are long these values may extend beyond the
pdf page edge.
.IP "\(bu" 4
Lines whose values do \fInot\fR include '\e' or '/' will be split across multiple
lines if they are more than 70 characters long. Split lines have a four-space
hanging indent.
.PP
In text output the password and field lines are indented by two spaces. There
is no line splitting as occurs with markdown output.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.SS "Perl modules"
.IX Subsection "Perl modules"
Carp, Const::Fast, Date::Simple, English, Env, experimental, File::Find::Rule,
Function::Parameters, Moo, MooX::HandlesVia, MooX::Options, namespace::clean,
Path::Tiny, strictures, Term::ProgressBar::Simple, Text::Wrap, Type::Tiny,
Types::Path::Tiny, Types::Standard, version.
.SS "Executables"
.IX Subsection "Executables"
pass.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Nebauer (david at nebauer dot org)
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2019 David Nebauer (david at nebauer dot org)
.PP
This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
