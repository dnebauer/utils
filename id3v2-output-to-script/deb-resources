# dn-qk-deb resources file
# [generated by dn-qk-deb on 2021-03-21 at 12:43:56]
# ------------------------------------------------------------
# Each line consists of key-value pairs
# separated by whitespace. If any key or value contains
# whitespace it must be enclosed by double quotation marks.
# Empty lines and comment lines (beginning with hashes)
# are ignored.
# Any unrecognised key will generate a fatal error
# Any key without a value will generate a fatal error
# Some names can be used only once while others can
# be used multiple times.
# ------------------------------------------------------------

# Package name
# Name of the package to be generated.
# Must not contain whitespace.
# Required. One only.
package-name dn-id3v2-output-to-script

# Package version
# Version number for package.
# Required. One only.
version 0.5

# Script and binary files
# Executable files to be packaged.
# Can be standard ('bin-file') or superuser-only ('sbin-file').
# Default value of 'bin-file' in built deb package: /usr/bin
# Default value of 'sbin-file' in built deb package: /usr/sbin
# Required (unless a library package). Multiple allowed
bin-file dn-id3v2-output-to-script
#sbin-file

# Manpages
# Man pages to package.
# Default location in built deb package: /usr/share/man/man1
# Required (unless a library package). Multiple allowed.
man-file dn-id3v2-output-to-script.1

# Data files
# Data files to package.
# Default location in built deb package: /usr/share/\$(PACKAGE).
# Optional. Multiple allowed.
#data-file

# Icon file
# Icon file to package.
# Must be xpm format no larger than 32x32.
# Useful command is: 'convert icon.png -geometry 32x32 icon.xpm'.
# Default location in built deb package: /usr/share/icons.
# Note icons are not put into an application subdirectory
# -- be careful of filename clashes.
# Optional. Multiple allowed.
#icon-file

# Desktop file
# Desktop file to package.
# Must conform to freedesktop.org Desktop Entry Specification
# (see http://standards.freedesktop.org/desktop-entry-spec/)
# Default location in built deb package: /usr/share/applications.
# Note desktop files are not put into an application subdirectory
# -- be careful of filename clashes.
# Optional. Multiple allowed.
#desktop-file

# Configuration files
# Configuration files to package.
# Default location in built deb package: /etc/\$(PACKAGE).
# Optional. Multiple allowed.
#conf-file

# Executable library files
# Executable programs run by other programs.
# Default value in built deb package: /usr/libexec/\$(PACKAGE).
# Optional. Multiple allowed.
#libexec-file

# Library data files
# Data files used by other programs.
# Default value in built deb package: /usr/lib/\$(PACKAGE).
# Optional. Multiple allowed.
#libdata-file

# Debconf file
# Debian build system debconf file
# In final package is named 'PACKAGE.config'
# Optional. One only
#debconf-file

# Templates file
# Debian build system templates file
# In final package is named 'PACKAGE.templates'
# Optional. One only
#templates-file

# Pre-install file
# Debian build system pre-install file
# In final package is named 'PACKAGE.preinst'
# Optional. One only
#preinstall-file

# Post-install file
# Debian build system post-install file
# In final package is named 'PACKAGE.postint'
# Optional. One only
#postinstall-file

# Pre-remove file
# Debian build system pre-remove file
# In final package is named 'PACKAGE.prerm'
# Optional. One only
#preremove-file

# Post-remove file
# Debian build system post-remove file
# In final package is named 'PACKAGE.postrm'
# Optional. One only
#postremove-file

# Bash completion file
# Debian build system bash completion file
# In final package is named 'PACKAGE.bash-completion'
# Optional. One only
#bash-completion-file

# Install file
# Debian build system install file
# In final package is named 'PACKAGE.install'
# Can be used in conjunction with 'extra' key
# Optional. One only
install-file install

# Extra files and directories
# Extra distribution files and directories
# Copied recursively into root of distribution
# Not added to deb package unless in combination
# with an install file (see 'install-file' key)
# Optional. Multiple allowed
extra-path contrib

# Control summary
# One line summary of script for inclusion in the
# package 'control' file.
# This, in turn, is displayed by many package managers.
# Must be no longer than 60 characters.
# Required. One only.
control-summary convert id3v2 output to a bash script

# Control description
# Description of script. This is a longer description
# than the one line summary and can stretch over
# multiple lines. Each line can be no longer than
# 60 characters. Paragraphs can be separated by a line
# consisting of a single period ('.'). This description
# will be included in the package 'control' file. This,
# in turn, is displayed by many package managers.
# Required. Multiple allowed.
control-description Convert id3v2 output (using the --list option) to a bash
control-description script. The bash script contains an id3v2 command for each
control-description mp3 file which sets its tags to those present in the initial
control-description output. Any id3v1 tag information in the input is ignored.
control-description The id3v2 output can be provided to this script as stdin
control-description (default) or as a file. The bash script output produced can
control-description be sent to stdout (default) or to a file. If output is sent
control-description to a file the created file is set to executable
control-description (permissions 0755).
control-description .
control-description This my seem to be a pointless script: when would it ever be
control-description necessary to set mp3 file tags to the values they already
control-description have? One applicable scenario, and the impetus for this
control-description script, is that on some occasions the id3v2 utility is
control-description unable to modify existing tags on some mp3 files. In those
control-description cases it is necessary to remove all tags and set them anew.
control-description .
control-description Warning: for any mp3 files containing an album image the
control-description image is extracted to the same directory as the mp3 file.
control-description The image file has the same base name as the mp3 file, with
control-description an extension determined by the image format (e.g., '.jpeg').
control-description Existing image files with the same name and extensions are
control-description silently overwritten. An extra eyeD3 command is added to
control-description the script file for each image file generated. This command
control-description adds the image to the mp3 file.

# Dependency
# The name of a single package this package depends on.
# Can include minimum version.
# Optional. Multiple allowed.

### Perl modules

#   perl, autodie, Carp, charnames, English, experimental, IO::File
depends-on perl (>= 5.20.2-6)

#   Const::Fast
depends-on libconst-fast-perl (>= 0.014-1.1)

#   Moo
depends-on libmoo-perl (>= 2.000001-2)

#   MooX::HandlesVia
depends-on libmoox-handlesvia-perl (>= 0.001008-2)

#   MooX::Options
depends-on libmoox-options-perl (>= 4.018-1)

#   MP3::Tag
depends-on libmp3-tag-perl (>= 1.13-1.2)

#   namespace::clean
depends-on libnamespace-clean-perl (>= 0.25-1)

#   Path::Tiny
depends-on libpath-tiny-perl (>= 0.072-1)

#   strictures
depends-on libstrictures-perl (>= 2.000001-2)

#   Types::Standard
depends-on libtype-tiny-perl (>= 1.000005-1)

#   version
depends-on libversion-perl (>= 1:0.9912-1)

### Executables

#   eyed3
depends-on eyed3 (>= 0.8.10-1.1)

#   id3v2
depends-on id3v2 (>= 0.1.12+dfsg-4)

# Copyright year
# Year of copyright
# Required. One only.
year 2021

# Email
# Email address of package maintainer
# Required. One only.
email david@nebauer.org

# Author
# Author of script
# Required. Multiple allowed.
author David Nebauer
