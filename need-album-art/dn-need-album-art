#!/usr/bin/perl

use Moo;                 # {{{1
use strictures 2;
use 5.006;
use 5.036_001;
use version; our $VERSION = qv('0.1');
use namespace::clean;    # }}}1

{

  package Dn::NeedAlbumArt;

  use Moo;               # {{{1
  use strictures 2;
  use namespace::clean;
  use Carp qw(croak);
  use Const::Fast;
  use Cwd;
  use English qw(-no_match_vars);
  use File::Find::Rule;
  use File::Spec;
  use List::SomeUtils;
  use MooX::Options protect_argv => 0;

  const my $TRUE  => 1;
  const my $FALSE => 0;
  const my $BASE  => Cwd::getcwd;    # }}}1

  # methods

  # main()    {{{1
  #
  # does:   main method
  # params: nil
  # prints: feedback
  # return: n/a, dies on failure
  sub main ($self) {    ## no critic (RequireInterpolationOfMetachars)

    # get directories with mp3 files but no album cover art
    # - File::Find::Rule->exec($filter) invokes $filter with $_ (aka $ARG)
    #   set to:
    #   (short name, name parameters, current path, full relative filename)
    my $filter = sub {

      # get current directory path
      my $path = $ARG[2];    # third parameter

      # look for mp3 files
      my $glob_mp3 = File::Spec->catfile($path, '*.mp3');
      my @mp3s     = glob $glob_mp3;

      # look for album cover art
      my $glob_art  = File::Spec->catfile($path, '{cover,album}.{png,jpg}');
      my @art_files = glob $glob_art;
      my $has_art   = List::SomeUtils::any {-e} @art_files;

      # return true if has mp3 files but no album cover art
      return (@mp3s and not $has_art);
    };

    my @dirpaths = File::Find::Rule->directory->exec($filter)->in($BASE);

    # convert all found (absolute) directory paths into relative paths
    my @dirs = map { File::Spec->abs2rel($_, $BASE) } @dirpaths;

    # output directories to stdout
    foreach (sort @dirs) { say or croak; }

    return;
  }    # }}}1

}

my $p = Dn::NeedAlbumArt->new_with_options->main;

1;

# POD    {{{1
__END__

=encoding utf8

=head1 NAME

dn-need-album-art - find directories needing album cover art

=head1 USAGE

B<dn-need-album-art>

B<dn-need-album-art -h>

=head1 REQUIRED ARGUMENTS

Nil.

=head1 OPTIONS

=over

=item B<-h>

Display help and exit.

=back

=head1 DESCRIPTION

Search the current directory recursively for subdirectories that need album
cover art. More specifically, it searches for subdirectories containing mp3
files but no album cover art file. An album cover art file is one named
F<album.png>, F<album.jpg>, F<cover.png>, or F<cover.png>.

The subdirectories matching these conditions are printed to STDOUT, one per
line.

=head1 DIAGNOSTICS

This script does not emit any specific errors. Any errors that occur are thrown
by an underlying module or by the operating system.

=head1 DEPENDENCIES

=head2 Perl modules

Carp, Const::Fast, Cwd, English, File::Find::Rule, File::Spec, List::SomeUtils, Moo, MooX::Options, namespace::clean, strictures, utf8, version.

=head1 CONFIGURATION

There is no configuration for this script.

=head1 EXIT STATUS

This script always exits with a successful status unless a fatal error has been
thrown by an underlying module or by the operating system.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head1 INCOMPATIBILITIES

There are no known incompatibilities.

=head1 AUTHOR

David Nebauer (david at nebauer dot org)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2020 David Nebauer (david at nebauer dot org)

This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut
# vim:foldmethod=marker:
