# dn-qk-deb resources file
# [generated by dn-qk-deb on 2017-02-09 at 12:32:09]
# ------------------------------------------------------------
# Each line consists of key-value pairs
# separated by whitespace. If any key or value contains
# whitespace it must be enclosed by double quotation marks.
# Empty lines and comment lines (beginning with hashes)
# are ignored.
# Any unrecognised key will generate a fatal error
# Any key without a value will generate a fatal error
# Some names can be used only once while others can
# be used multiple times.
# ------------------------------------------------------------
 
# Package name
# Name of the package to be generated.
# Must not contain whitespace.
# Required. One only.
package-name umpv
 
# Package version
# Version number for package.
# Required. One only.
version 0.1
 
# Script and binary files
# Executable files to be packaged.
# Can be standard ('bin-file') or superuser-only ('sbin-file').
# Default value of 'bin-file' in built deb package: /usr/bin
# Default value of 'sbin-file' in built deb package: /usr/sbin
# Required (unless a library package). Multiple allowed
bin-file umpv
#sbin-file 
 
# Manpages
# Man pages to package.
# Default location in built deb package: /usr/share/man/man1
# Required (unless a library package). Multiple allowed.
man-file umpv.1
 
# Data files
# Data files to package.
# Default location in built deb package: /usr/share/\$(PACKAGE).
# Optional. Multiple allowed.
#data-file 
 
# Icon file
# Icon file to package.
# Must be xpm format no larger than 32x32.
# Useful command is: 'convert icon.png -geometry 32x32 icon.xpm'.
# Default location in built deb package: /usr/share/icons.
# Note icons are not put into an application subdirectory
# -- be careful of filename clashes.
# Optional. Multiple allowed.
#icon-file 
 
# Desktop file
# Desktop file to package.
# Must conform to freedesktop.org Desktop Entry Specification
# (see http://standards.freedesktop.org/desktop-entry-spec/)
# Default location in built deb package: /usr/share/applications.
# Note desktop files are not put into an application subdirectory
# -- be careful of filename clashes.
# Optional. Multiple allowed.
#desktop-file 
 
# Configuration files
# Configuration files to package.
# Default location in built deb package: /etc/\$(PACKAGE).
# Optional. Multiple allowed.
#conf-file 
 
# Executable library files
# Executable programs run by other programs.
# Since multiarch implementation this path includes a subdirectory
# whose name is an architecture-based triplet.
# The triplet name is obtained with the command:
#   dpkg-architecture -qDEB_HOST_MULTIARCH
# Default value in built deb package: /usr/lib/<triplet>/\$(PACKAGE).
# Optional. Multiple allowed.
#libexec-file 
 
# Library data files
# Data files used by other programs.
# Since multiarch implementation this path includes a subdirectory
# whose name is an architecture-based triplet.
# The triplet name is obtained with the command:
#   dpkg-architecture -qDEB_HOST_MULTIARCH
# Default value in built deb package: /usr/lib/<triplet>/\$(PACKAGE).
# Optional. Multiple allowed.
#libdata-file 
 
# Debconf file
# Debian build system debconf file
# In final package is named 'PACKAGE.config'
# Optional. One only
#debconf-file 
 
# Templates file
# Debian build system templates file
# In final package is named 'PACKAGE.templates'
# Optional. One only
#templates-file 
 
# Pre-install file
# Debian build system pre-install file
# In final package is named 'PACKAGE.preinst'
# Optional. One only
#preinstall-file 
 
# Post-install file
# Debian build system post-install file
# In final package is named 'PACKAGE.postint'
# Optional. One only
#postinstall-file 
 
# Pre-remove file
# Debian build system pre-remove file
# In final package is named 'PACKAGE.prerm'
# Optional. One only
#preremove-file 
 
# Post-remove file
# Debian build system post-remove file
# In final package is named 'PACKAGE.postrm'
# Optional. One only
#postremove-file 
 
# Bash completion file
# Debian build system bash completion file
# In final package is named 'PACKAGE.bash-completion'
# Optional. One only
#bash-completion-file 
 
# Control summary
# One line summary of script for inclusion in the
# package 'control' file.
# This, in turn, is displayed by many package managers.
# Must be no longer than 60 characters.
# Required. One only.
control-summary emulate 'unique application' functionality for mpv
 
# Control description
# Description of script. This is a longer description
# than the one line summary and can stretch over
# multiple lines. Each line can be no longer than
# 60 characters. Paragraphs can be separated by a line
# consisting of a single period ('.'). This description
# will be included in the package 'control' file. This,
# in turn, is displayed by many package managers.
# Required. Multiple allowed.
control-description When starting playback with this script, it will try to
control-description reuse an already running instance of mpv (but only if that
control-description was started with umpv). Other mpv instances (not started by
control-description umpv) are ignored, and the script doesn't know about them.
control-description .
control-description This only takes filenames as arguments. Custom options
control-description can't be used; the script interprets them as filenames. If
control-description mpv is already running, the files passed to umpv are
control-description appended to mpv's internal playlist. If a file does not
control-description exist or is otherwise not playable, mpv will skip the
control-description playlist entry when attempting to play it (from the GUI
control-description perspective, it's silently ignored).
control-description .
control-description If mpv isn't running yet, this script will start mpv and
control-description let it control the current terminal. It will not write
control-description output to stdout/stderr, because this will typically just
control-description fill ~/.xsession-errors with garbage.
control-description .
control-description mpv will terminate if there are no more files to play, and
control-description running the umpv script after that will start a new mpv
control-description .
control-description Credit: file taken from mpv github project
control-description (https://github.com/mpv-player/mpv/blob/master/TOOLS/umpv)
 
# Dependency
# The name of a single package this package depends on.
# Can include minimum version.
# Optional. Multiple allowed.
 
##   
#depends-on  (>= 
#)
 
# mpv
depends-on mpv (>= 0.23.0-1)
 
# Copyright year
# Year of copyright
# Required. One only.
year 2017
 
# Email
# Email address of package maintainer
# Required. One only.
email david@nebauer.org
 
# Author
# Author of script
# Required. Multiple allowed.
author David Nebauer
